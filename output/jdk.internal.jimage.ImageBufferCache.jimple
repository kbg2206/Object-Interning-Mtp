class jdk.internal.jimage.ImageBufferCache extends java.lang.Object
{
    private static final int MAX_CACHED_BUFFERS;
    private static final int LARGE_BUFFER;
    private static final java.lang.ThreadLocal CACHE;
    private static java.util.Comparator DECREASING_CAPACITY_NULLS_LAST;

    void <init>()
    {
        jdk.internal.jimage.ImageBufferCache this;

        this := @this: jdk.internal.jimage.ImageBufferCache;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.nio.ByteBuffer allocateBuffer(long)
    {
        int $stack4;
        long size, $stack2, $stack3;
        java.nio.ByteBuffer $stack5;

        size := @parameter0: long;

        $stack2 = size + 4095L;

        $stack3 = $stack2 & -4096L;

        $stack4 = (int) $stack3;

        $stack5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($stack4);

        return $stack5;
    }

    static java.nio.ByteBuffer getBuffer(long)
    {
        java.lang.IndexOutOfBoundsException $u0;
        long size, $stack22;
        java.nio.ByteBuffer $stack20, result;
        byte $stack7, $stack9, $stack10, $stack23;
        int $stack21, i, $stack13, $i0, $i1, $i2, $i3, $i4;
        java.util.Map$Entry[] cache;
        java.lang.ThreadLocal $stack11;
        java.util.Map$Entry reference;
        java.lang.Object $stack12;

        size := @parameter0: long;

        $stack7 = size cmp 0L;

        $i0 = (int) $stack7;

        if $i0 < 0 goto label1;

        $stack9 = 2147483647L cmp size;

        $i1 = (int) $stack9;

        if $i1 >= 0 goto label2;

     label1:
        $u0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $u0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("size");

        throw $u0;

     label2:
        result = null;

        $stack10 = size cmp 65536L;

        $i2 = (int) $stack10;

        if $i2 <= 0 goto label3;

        result = staticinvoke <jdk.internal.jimage.ImageBufferCache: java.nio.ByteBuffer allocateBuffer(long)>(size);

        goto label7;

     label3:
        $stack11 = <jdk.internal.jimage.ImageBufferCache: java.lang.ThreadLocal CACHE>;

        $stack12 = virtualinvoke $stack11.<java.lang.ThreadLocal: java.lang.Object get()>();

        cache = (java.util.Map$Entry[]) $stack12;

        i = 2;

     label4:
        if i < 0 goto label6;

        reference = cache[i];

        if reference == null goto label5;

        $stack20 = staticinvoke <jdk.internal.jimage.ImageBufferCache: java.nio.ByteBuffer getByteBuffer(java.util.Map$Entry)>(reference);

        if $stack20 == null goto label5;

        $stack21 = virtualinvoke $stack20.<java.nio.ByteBuffer: int capacity()>();

        $stack22 = (long) $stack21;

        $stack23 = size cmp $stack22;

        $i3 = (int) $stack23;

        if $i3 > 0 goto label5;

        cache[i] = null;

        result = $stack20;

        virtualinvoke $stack20.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();

        goto label6;

     label5:
        $i4 = (int) -1;

        i = i + $i4;

        goto label4;

     label6:
        if result != null goto label7;

        result = staticinvoke <jdk.internal.jimage.ImageBufferCache: java.nio.ByteBuffer allocateBuffer(long)>(size);

     label7:
        $stack13 = (int) size;

        virtualinvoke result.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>($stack13);

        return result;
    }

    static void releaseBuffer(java.nio.ByteBuffer)
    {
        java.lang.ThreadLocal $stack5;
        java.util.Map$Entry $stack8, reference;
        java.nio.ByteBuffer buffer, $stack12;
        int $stack4, i;
        java.lang.Object $stack6;
        java.util.Comparator $stack9;
        java.util.Map$Entry[] cache;

        buffer := @parameter0: java.nio.ByteBuffer;

        $stack4 = virtualinvoke buffer.<java.nio.ByteBuffer: int capacity()>();

        if $stack4 <= 65536 goto label1;

        return;

     label1:
        $stack5 = <jdk.internal.jimage.ImageBufferCache: java.lang.ThreadLocal CACHE>;

        $stack6 = virtualinvoke $stack5.<java.lang.ThreadLocal: java.lang.Object get()>();

        cache = (java.util.Map$Entry[]) $stack6;

        i = 0;

     label2:
        if i >= 3 goto label4;

        reference = cache[i];

        if reference == null goto label3;

        $stack12 = staticinvoke <jdk.internal.jimage.ImageBufferCache: java.nio.ByteBuffer getByteBuffer(java.util.Map$Entry)>(reference);

        if $stack12 != null goto label3;

        cache[i] = null;

     label3:
        i = i + 1;

        goto label2;

     label4:
        $stack8 = staticinvoke <jdk.internal.jimage.ImageBufferCache: java.util.Map$Entry newCacheEntry(java.nio.ByteBuffer)>(buffer);

        cache[3] = $stack8;

        $stack9 = <jdk.internal.jimage.ImageBufferCache: java.util.Comparator DECREASING_CAPACITY_NULLS_LAST>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(cache, $stack9);

        cache[3] = null;

        return;
    }

    private static java.util.Map$Entry newCacheEntry(java.nio.ByteBuffer)
    {
        java.util.AbstractMap$SimpleEntry $stack1;
        int $stack3;
        java.lang.ref.WeakReference $stack2;
        java.lang.Integer $stack4;
        java.nio.ByteBuffer bb;

        bb := @parameter0: java.nio.ByteBuffer;

        $stack1 = new java.util.AbstractMap$SimpleEntry;

        $stack2 = new java.lang.ref.WeakReference;

        specialinvoke $stack2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(bb);

        $stack3 = virtualinvoke bb.<java.nio.ByteBuffer: int capacity()>();

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack3);

        specialinvoke $stack1.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($stack2, $stack4);

        return $stack1;
    }

    private static int getCapacity(java.util.Map$Entry)
    {
        java.util.Map$Entry e;
        int $stack3;
        java.lang.Object $stack1;
        java.lang.Integer $stack2;

        e := @parameter0: java.util.Map$Entry;

        if e != null goto label1;

        $stack3 = 0;

        goto label2;

     label1:
        $stack1 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack2 = (java.lang.Integer) $stack1;

        $stack3 = virtualinvoke $stack2.<java.lang.Integer: int intValue()>();

     label2:
        return $stack3;
    }

    private static java.nio.ByteBuffer getByteBuffer(java.util.Map$Entry)
    {
        java.util.Map$Entry e;
        java.lang.Object $stack1, $stack3;
        java.lang.ref.WeakReference $stack2;
        java.nio.ByteBuffer $stack4;

        e := @parameter0: java.util.Map$Entry;

        if e != null goto label1;

        $stack4 = null;

        goto label2;

     label1:
        $stack1 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack2 = (java.lang.ref.WeakReference) $stack1;

        $stack3 = virtualinvoke $stack2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $stack4 = (java.nio.ByteBuffer) $stack3;

     label2:
        return $stack4;
    }

    static void <clinit>()
    {
        jdk.internal.jimage.ImageBufferCache$2 $stack1;
        jdk.internal.jimage.ImageBufferCache$1 $stack0;

        <jdk.internal.jimage.ImageBufferCache: int LARGE_BUFFER> = 65536;

        <jdk.internal.jimage.ImageBufferCache: int MAX_CACHED_BUFFERS> = 3;

        $stack0 = new jdk.internal.jimage.ImageBufferCache$1;

        specialinvoke $stack0.<jdk.internal.jimage.ImageBufferCache$1: void <init>()>();

        <jdk.internal.jimage.ImageBufferCache: java.lang.ThreadLocal CACHE> = $stack0;

        $stack1 = new jdk.internal.jimage.ImageBufferCache$2;

        specialinvoke $stack1.<jdk.internal.jimage.ImageBufferCache$2: void <init>()>();

        <jdk.internal.jimage.ImageBufferCache: java.util.Comparator DECREASING_CAPACITY_NULLS_LAST> = $stack1;

        return;
    }
}
