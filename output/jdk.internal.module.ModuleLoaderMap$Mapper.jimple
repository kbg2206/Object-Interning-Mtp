final class jdk.internal.module.ModuleLoaderMap$Mapper extends java.lang.Object implements java.util.function.Function
{
    private static final java.lang.ClassLoader PLATFORM_CLASSLOADER;
    private static final java.lang.ClassLoader APP_CLASSLOADER;
    private static final java.lang.Integer PLATFORM_LOADER_INDEX;
    private static final java.lang.Integer APP_LOADER_INDEX;
    private final java.util.Map map;

    void <init>(java.lang.module.Configuration)
    {
        java.util.Iterator $stack8;
        java.util.Set $stack7, $stack12, $stack15;
        java.util.HashMap $stack6;
        java.lang.module.Configuration cf;
        jdk.internal.module.ModuleLoaderMap$Mapper this;
        java.lang.Integer $stack17, $stack19;
        java.lang.module.ResolvedModule resolvedModule;
        java.lang.Object $stack10;
        java.lang.String $stack11;
        boolean $stack9, $stack13, $stack16;

        this := @this: jdk.internal.module.ModuleLoaderMap$Mapper;

        cf := @parameter0: java.lang.module.Configuration;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack6 = new java.util.HashMap;

        specialinvoke $stack6.<java.util.HashMap: void <init>()>();

        $stack7 = virtualinvoke cf.<java.lang.module.Configuration: java.util.Set modules()>();

        $stack8 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke $stack8.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label4;

        $stack10 = interfaceinvoke $stack8.<java.util.Iterator: java.lang.Object next()>();

        resolvedModule = (java.lang.module.ResolvedModule) $stack10;

        $stack11 = virtualinvoke resolvedModule.<java.lang.module.ResolvedModule: java.lang.String name()>();

        $stack12 = <jdk.internal.module.ModuleLoaderMap$Modules: java.util.Set bootModules>;

        $stack13 = interfaceinvoke $stack12.<java.util.Set: boolean contains(java.lang.Object)>($stack11);

        if $stack13 != 0 goto label3;

        $stack15 = <jdk.internal.module.ModuleLoaderMap$Modules: java.util.Set platformModules>;

        $stack16 = interfaceinvoke $stack15.<java.util.Set: boolean contains(java.lang.Object)>($stack11);

        if $stack16 == 0 goto label2;

        $stack19 = <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.Integer PLATFORM_LOADER_INDEX>;

        virtualinvoke $stack6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack11, $stack19);

        goto label3;

     label2:
        $stack17 = <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.Integer APP_LOADER_INDEX>;

        virtualinvoke $stack6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack11, $stack17);

     label3:
        goto label1;

     label4:
        this.<jdk.internal.module.ModuleLoaderMap$Mapper: java.util.Map map> = $stack6;

        return;
    }

    public java.lang.ClassLoader apply(java.lang.String)
    {
        jdk.internal.module.ModuleLoaderMap$Mapper this;
        java.lang.Integer loader, $stack5, $stack6;
        java.util.Map $stack3;
        java.lang.Object $stack4;
        java.lang.String name;
        java.lang.ClassLoader $stack7, $stack8;

        this := @this: jdk.internal.module.ModuleLoaderMap$Mapper;

        name := @parameter0: java.lang.String;

        $stack3 = this.<jdk.internal.module.ModuleLoaderMap$Mapper: java.util.Map map>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(name);

        loader = (java.lang.Integer) $stack4;

        $stack5 = <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.Integer APP_LOADER_INDEX>;

        if loader != $stack5 goto label1;

        $stack8 = <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.ClassLoader APP_CLASSLOADER>;

        return $stack8;

     label1:
        $stack6 = <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.Integer PLATFORM_LOADER_INDEX>;

        if loader != $stack6 goto label2;

        $stack7 = <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.ClassLoader PLATFORM_CLASSLOADER>;

        return $stack7;

     label2:
        return null;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        java.lang.Object l1;
        java.lang.String $stack2;
        java.lang.ClassLoader $stack3;
        jdk.internal.module.ModuleLoaderMap$Mapper this;

        this := @this: jdk.internal.module.ModuleLoaderMap$Mapper;

        l1 := @parameter0: java.lang.Object;

        $stack2 = (java.lang.String) l1;

        $stack3 = virtualinvoke this.<jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.ClassLoader apply(java.lang.String)>($stack2);

        return $stack3;
    }

    static void <clinit>()
    {
        java.lang.ClassLoader $stack0, $stack1;
        java.lang.Integer $stack2, $stack3;

        $stack0 = staticinvoke <jdk.internal.loader.ClassLoaders: java.lang.ClassLoader platformClassLoader()>();

        <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.ClassLoader PLATFORM_CLASSLOADER> = $stack0;

        $stack1 = staticinvoke <jdk.internal.loader.ClassLoaders: java.lang.ClassLoader appClassLoader()>();

        <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.ClassLoader APP_CLASSLOADER> = $stack1;

        $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.Integer PLATFORM_LOADER_INDEX> = $stack2;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        <jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.Integer APP_LOADER_INDEX> = $stack3;

        return;
    }
}
