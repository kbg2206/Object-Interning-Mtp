final class jdk.internal.module.Builder extends java.lang.Object
{
    private static final jdk.internal.access.JavaLangModuleAccess JLMA;
    static java.lang.module.ModuleDescriptor$Version cachedVersion;
    final java.lang.String name;
    boolean open;
    boolean synthetic;
    boolean mandated;
    java.util.Set requires;
    java.util.Set exports;
    java.util.Set opens;
    java.util.Set packages;
    java.util.Set uses;
    java.util.Set provides;
    java.lang.module.ModuleDescriptor$Version version;
    java.lang.String mainClass;
    static final boolean $assertionsDisabled;

    public static java.lang.module.ModuleDescriptor$Requires newRequires(java.util.Set, java.lang.String, java.lang.String)
    {
        jdk.internal.access.JavaLangModuleAccess $stack5;
        java.lang.module.ModuleDescriptor$Version ver, version;
        java.util.Set mods;
        java.lang.String compiledVersion, mn, $stack11;
        java.lang.module.ModuleDescriptor$Requires $stack6;
        boolean $stack12;

        mods := @parameter0: java.util.Set;

        mn := @parameter1: java.lang.String;

        compiledVersion := @parameter2: java.lang.String;

        version = null;

        if compiledVersion == null goto label2;

        ver = <jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version cachedVersion>;

        if ver == null goto label1;

        $stack11 = virtualinvoke ver.<java.lang.module.ModuleDescriptor$Version: java.lang.String toString()>();

        $stack12 = virtualinvoke compiledVersion.<java.lang.String: boolean equals(java.lang.Object)>($stack11);

        if $stack12 == 0 goto label1;

        version = ver;

        goto label2;

     label1:
        version = staticinvoke <java.lang.module.ModuleDescriptor$Version: java.lang.module.ModuleDescriptor$Version parse(java.lang.String)>(compiledVersion);

     label2:
        $stack5 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $stack6 = interfaceinvoke $stack5.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Requires newRequires(java.util.Set,java.lang.String,java.lang.module.ModuleDescriptor$Version)>(mods, mn, version);

        return $stack6;
    }

    public static java.lang.module.ModuleDescriptor$Requires newRequires(java.util.Set, java.lang.String)
    {
        java.util.Set mods;
        java.lang.String mn;
        java.lang.module.ModuleDescriptor$Requires $stack2;

        mods := @parameter0: java.util.Set;

        mn := @parameter1: java.lang.String;

        $stack2 = staticinvoke <jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Requires newRequires(java.util.Set,java.lang.String,java.lang.String)>(mods, mn, null);

        return $stack2;
    }

    public static java.lang.module.ModuleDescriptor$Exports newExports(java.util.Set, java.lang.String, java.util.Set)
    {
        jdk.internal.access.JavaLangModuleAccess $stack3;
        java.util.Set ms, targets;
        java.lang.String pn;
        java.lang.module.ModuleDescriptor$Exports $stack4;

        ms := @parameter0: java.util.Set;

        pn := @parameter1: java.lang.String;

        targets := @parameter2: java.util.Set;

        $stack3 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $stack4 = interfaceinvoke $stack3.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Exports newExports(java.util.Set,java.lang.String,java.util.Set)>(ms, pn, targets);

        return $stack4;
    }

    public static java.lang.module.ModuleDescriptor$Opens newOpens(java.util.Set, java.lang.String)
    {
        jdk.internal.access.JavaLangModuleAccess $stack2;
        java.util.Set ms;
        java.lang.String pn;
        java.lang.module.ModuleDescriptor$Opens $stack3;

        ms := @parameter0: java.util.Set;

        pn := @parameter1: java.lang.String;

        $stack2 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $stack3 = interfaceinvoke $stack2.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Opens newOpens(java.util.Set,java.lang.String)>(ms, pn);

        return $stack3;
    }

    public static java.lang.module.ModuleDescriptor$Opens newOpens(java.util.Set, java.lang.String, java.util.Set)
    {
        jdk.internal.access.JavaLangModuleAccess $stack3;
        java.util.Set ms, targets;
        java.lang.String pn;
        java.lang.module.ModuleDescriptor$Opens $stack4;

        ms := @parameter0: java.util.Set;

        pn := @parameter1: java.lang.String;

        targets := @parameter2: java.util.Set;

        $stack3 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $stack4 = interfaceinvoke $stack3.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Opens newOpens(java.util.Set,java.lang.String,java.util.Set)>(ms, pn, targets);

        return $stack4;
    }

    public static java.lang.module.ModuleDescriptor$Exports newExports(java.util.Set, java.lang.String)
    {
        jdk.internal.access.JavaLangModuleAccess $stack2;
        java.util.Set ms;
        java.lang.String pn;
        java.lang.module.ModuleDescriptor$Exports $stack3;

        ms := @parameter0: java.util.Set;

        pn := @parameter1: java.lang.String;

        $stack2 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $stack3 = interfaceinvoke $stack2.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Exports newExports(java.util.Set,java.lang.String)>(ms, pn);

        return $stack3;
    }

    public static java.lang.module.ModuleDescriptor$Provides newProvides(java.lang.String, java.util.List)
    {
        jdk.internal.access.JavaLangModuleAccess $stack2;
        java.util.List pcs;
        java.lang.module.ModuleDescriptor$Provides $stack3;
        java.lang.String st;

        st := @parameter0: java.lang.String;

        pcs := @parameter1: java.util.List;

        $stack2 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $stack3 = interfaceinvoke $stack2.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Provides newProvides(java.lang.String,java.util.List)>(st, pcs);

        return $stack3;
    }

    void <init>(java.lang.String)
    {
        jdk.internal.module.Builder this;
        java.util.Set $stack2, $stack3, $stack4, $stack5, $stack6;
        java.lang.String name;

        this := @this: jdk.internal.module.Builder;

        name := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.module.Builder: java.lang.String name> = name;

        $stack2 = staticinvoke <java.util.Set: java.util.Set of()>();

        this.<jdk.internal.module.Builder: java.util.Set requires> = $stack2;

        $stack3 = staticinvoke <java.util.Set: java.util.Set of()>();

        this.<jdk.internal.module.Builder: java.util.Set exports> = $stack3;

        $stack4 = staticinvoke <java.util.Set: java.util.Set of()>();

        this.<jdk.internal.module.Builder: java.util.Set opens> = $stack4;

        $stack5 = staticinvoke <java.util.Set: java.util.Set of()>();

        this.<jdk.internal.module.Builder: java.util.Set provides> = $stack5;

        $stack6 = staticinvoke <java.util.Set: java.util.Set of()>();

        this.<jdk.internal.module.Builder: java.util.Set uses> = $stack6;

        return;
    }

    jdk.internal.module.Builder open(boolean)
    {
        jdk.internal.module.Builder this;
        boolean value;

        this := @this: jdk.internal.module.Builder;

        value := @parameter0: boolean;

        this.<jdk.internal.module.Builder: boolean open> = value;

        return this;
    }

    jdk.internal.module.Builder synthetic(boolean)
    {
        jdk.internal.module.Builder this;
        boolean value;

        this := @this: jdk.internal.module.Builder;

        value := @parameter0: boolean;

        this.<jdk.internal.module.Builder: boolean synthetic> = value;

        return this;
    }

    jdk.internal.module.Builder mandated(boolean)
    {
        jdk.internal.module.Builder this;
        boolean value;

        this := @this: jdk.internal.module.Builder;

        value := @parameter0: boolean;

        this.<jdk.internal.module.Builder: boolean mandated> = value;

        return this;
    }

    public jdk.internal.module.Builder exports(java.lang.module.ModuleDescriptor$Exports[])
    {
        jdk.internal.module.Builder this;
        java.lang.module.ModuleDescriptor$Exports[] exports;
        java.util.Set $stack2;

        this := @this: jdk.internal.module.Builder;

        exports := @parameter0: java.lang.module.ModuleDescriptor$Exports[];

        $stack2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(exports);

        this.<jdk.internal.module.Builder: java.util.Set exports> = $stack2;

        return this;
    }

    public jdk.internal.module.Builder opens(java.lang.module.ModuleDescriptor$Opens[])
    {
        jdk.internal.module.Builder this;
        java.lang.module.ModuleDescriptor$Opens[] opens;
        java.util.Set $stack2;

        this := @this: jdk.internal.module.Builder;

        opens := @parameter0: java.lang.module.ModuleDescriptor$Opens[];

        $stack2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(opens);

        this.<jdk.internal.module.Builder: java.util.Set opens> = $stack2;

        return this;
    }

    public jdk.internal.module.Builder requires(java.lang.module.ModuleDescriptor$Requires[])
    {
        jdk.internal.module.Builder this;
        java.lang.module.ModuleDescriptor$Requires[] requires;
        java.util.Set $stack2;

        this := @this: jdk.internal.module.Builder;

        requires := @parameter0: java.lang.module.ModuleDescriptor$Requires[];

        $stack2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(requires);

        this.<jdk.internal.module.Builder: java.util.Set requires> = $stack2;

        return this;
    }

    public jdk.internal.module.Builder packages(java.util.Set)
    {
        jdk.internal.module.Builder this;
        java.util.Set packages;

        this := @this: jdk.internal.module.Builder;

        packages := @parameter0: java.util.Set;

        this.<jdk.internal.module.Builder: java.util.Set packages> = packages;

        return this;
    }

    public jdk.internal.module.Builder uses(java.util.Set)
    {
        jdk.internal.module.Builder this;
        java.util.Set uses;

        this := @this: jdk.internal.module.Builder;

        uses := @parameter0: java.util.Set;

        this.<jdk.internal.module.Builder: java.util.Set uses> = uses;

        return this;
    }

    public jdk.internal.module.Builder provides(java.lang.module.ModuleDescriptor$Provides[])
    {
        jdk.internal.module.Builder this;
        java.lang.module.ModuleDescriptor$Provides[] provides;
        java.util.Set $stack2;

        this := @this: jdk.internal.module.Builder;

        provides := @parameter0: java.lang.module.ModuleDescriptor$Provides[];

        $stack2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(provides);

        this.<jdk.internal.module.Builder: java.util.Set provides> = $stack2;

        return this;
    }

    public jdk.internal.module.Builder version(java.lang.String)
    {
        jdk.internal.module.Builder this;
        java.lang.module.ModuleDescriptor$Version ver, $stack3;
        java.lang.String v, $stack4;
        boolean $stack5;

        this := @this: jdk.internal.module.Builder;

        v := @parameter0: java.lang.String;

        ver = <jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version cachedVersion>;

        if ver == null goto label1;

        $stack4 = virtualinvoke ver.<java.lang.module.ModuleDescriptor$Version: java.lang.String toString()>();

        $stack5 = virtualinvoke v.<java.lang.String: boolean equals(java.lang.Object)>($stack4);

        if $stack5 == 0 goto label1;

        this.<jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version version> = ver;

        goto label2;

     label1:
        $stack3 = staticinvoke <java.lang.module.ModuleDescriptor$Version: java.lang.module.ModuleDescriptor$Version parse(java.lang.String)>(v);

        this.<jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version version> = $stack3;

        <jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version cachedVersion> = $stack3;

     label2:
        return this;
    }

    public jdk.internal.module.Builder mainClass(java.lang.String)
    {
        jdk.internal.module.Builder this;
        java.lang.String mc;

        this := @this: jdk.internal.module.Builder;

        mc := @parameter0: java.lang.String;

        this.<jdk.internal.module.Builder: java.lang.String mainClass> = mc;

        return this;
    }

    private java.util.Set modifiers()
    {
        jdk.internal.module.Builder this;
        int n, $i0, $i1, $i2;
        boolean $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;
        java.lang.module.ModuleDescriptor$Modifier $stack10, $stack12, $stack14;
        java.util.Set $stack9, $stack16;
        java.lang.module.ModuleDescriptor$Modifier[] mods;

        this := @this: jdk.internal.module.Builder;

        n = 0;

        $stack3 = this.<jdk.internal.module.Builder: boolean open>;

        if $stack3 == 0 goto label1;

        n = 1;

     label1:
        $stack4 = this.<jdk.internal.module.Builder: boolean synthetic>;

        if $stack4 == 0 goto label2;

        n = n + 1;

     label2:
        $stack5 = this.<jdk.internal.module.Builder: boolean mandated>;

        if $stack5 == 0 goto label3;

        n = n + 1;

     label3:
        if n != 0 goto label4;

        $stack16 = staticinvoke <java.util.Set: java.util.Set of()>();

        return $stack16;

     label4:
        mods = newarray (java.lang.module.ModuleDescriptor$Modifier)[n];

        $stack6 = this.<jdk.internal.module.Builder: boolean open>;

        if $stack6 == 0 goto label5;

        $i0 = (int) -1;

        n = n + $i0;

        $stack14 = <java.lang.module.ModuleDescriptor$Modifier: java.lang.module.ModuleDescriptor$Modifier OPEN>;

        mods[n] = $stack14;

     label5:
        $stack7 = this.<jdk.internal.module.Builder: boolean synthetic>;

        if $stack7 == 0 goto label6;

        $i1 = (int) -1;

        n = n + $i1;

        $stack12 = <java.lang.module.ModuleDescriptor$Modifier: java.lang.module.ModuleDescriptor$Modifier SYNTHETIC>;

        mods[n] = $stack12;

     label6:
        $stack8 = this.<jdk.internal.module.Builder: boolean mandated>;

        if $stack8 == 0 goto label7;

        $i2 = (int) -1;

        n = n + $i2;

        $stack10 = <java.lang.module.ModuleDescriptor$Modifier: java.lang.module.ModuleDescriptor$Modifier MANDATED>;

        mods[n] = $stack10;

     label7:
        $stack9 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(mods);

        return $stack9;
    }

    public java.lang.module.ModuleDescriptor build(int)
    {
        java.lang.module.ModuleDescriptor $stack14;
        java.lang.AssertionError $stack27;
        jdk.internal.module.Builder this;
        int hashCode;
        java.lang.String $stack4, $stack7, $stack15;
        boolean $stack2;
        jdk.internal.access.JavaLangModuleAccess $stack3;
        java.lang.module.ModuleDescriptor$Version $stack5;
        java.util.Set $stack6, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;

        this := @this: jdk.internal.module.Builder;

        hashCode := @parameter0: int;

        $stack2 = <jdk.internal.module.Builder: boolean $assertionsDisabled>;

        if $stack2 != 0 goto label1;

        $stack15 = this.<jdk.internal.module.Builder: java.lang.String name>;

        if $stack15 != null goto label1;

        $stack27 = new java.lang.AssertionError;

        specialinvoke $stack27.<java.lang.AssertionError: void <init>()>();

        throw $stack27;

     label1:
        $stack3 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $stack4 = this.<jdk.internal.module.Builder: java.lang.String name>;

        $stack5 = this.<jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version version>;

        $stack6 = virtualinvoke this.<jdk.internal.module.Builder: java.util.Set modifiers()>();

        $stack13 = this.<jdk.internal.module.Builder: java.util.Set requires>;

        $stack12 = this.<jdk.internal.module.Builder: java.util.Set exports>;

        $stack11 = this.<jdk.internal.module.Builder: java.util.Set opens>;

        $stack10 = this.<jdk.internal.module.Builder: java.util.Set uses>;

        $stack9 = this.<jdk.internal.module.Builder: java.util.Set provides>;

        $stack8 = this.<jdk.internal.module.Builder: java.util.Set packages>;

        $stack7 = this.<jdk.internal.module.Builder: java.lang.String mainClass>;

        $stack14 = interfaceinvoke $stack3.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor newModuleDescriptor(java.lang.String,java.lang.module.ModuleDescriptor$Version,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.lang.String,int)>($stack4, $stack5, $stack6, $stack13, $stack12, $stack11, $stack10, $stack9, $stack8, $stack7, hashCode);

        return $stack14;
    }

    static void <clinit>()
    {
        jdk.internal.access.JavaLangModuleAccess $stack2;
        java.lang.Class $stack0;
        boolean $stack1, $stack3;

        $stack0 = class "Ljdk/internal/module/Builder;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        <jdk.internal.module.Builder: boolean $assertionsDisabled> = $stack3;

        $stack2 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangModuleAccess getJavaLangModuleAccess()>();

        <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA> = $stack2;

        return;
    }
}
