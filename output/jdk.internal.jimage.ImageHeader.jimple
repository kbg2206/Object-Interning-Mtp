public final class jdk.internal.jimage.ImageHeader extends java.lang.Object
{
    public static final int MAGIC;
    public static final int MAJOR_VERSION;
    public static final int MINOR_VERSION;
    private static final int HEADER_SLOTS;
    private final int magic;
    private final int majorVersion;
    private final int minorVersion;
    private final int flags;
    private final int resourceCount;
    private final int tableLength;
    private final int locationsSize;
    private final int stringsSize;

    public void <init>(int, int, int, int)
    {
        jdk.internal.jimage.ImageHeader this;
        int resourceCount, tableCount, locationsSize, stringsSize;

        this := @this: jdk.internal.jimage.ImageHeader;

        resourceCount := @parameter0: int;

        tableCount := @parameter1: int;

        locationsSize := @parameter2: int;

        stringsSize := @parameter3: int;

        specialinvoke this.<jdk.internal.jimage.ImageHeader: void <init>(int,int,int,int,int,int,int,int)>(-889267494, 1, 0, 0, resourceCount, tableCount, locationsSize, stringsSize);

        return;
    }

    public void <init>(int, int, int, int, int, int, int, int)
    {
        jdk.internal.jimage.ImageHeader this;
        int magic, majorVersion, minorVersion, flags, resourceCount, tableLength, locationsSize, stringsSize;

        this := @this: jdk.internal.jimage.ImageHeader;

        magic := @parameter0: int;

        majorVersion := @parameter1: int;

        minorVersion := @parameter2: int;

        flags := @parameter3: int;

        resourceCount := @parameter4: int;

        tableLength := @parameter5: int;

        locationsSize := @parameter6: int;

        stringsSize := @parameter7: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.jimage.ImageHeader: int magic> = magic;

        this.<jdk.internal.jimage.ImageHeader: int majorVersion> = majorVersion;

        this.<jdk.internal.jimage.ImageHeader: int minorVersion> = minorVersion;

        this.<jdk.internal.jimage.ImageHeader: int flags> = flags;

        this.<jdk.internal.jimage.ImageHeader: int resourceCount> = resourceCount;

        this.<jdk.internal.jimage.ImageHeader: int tableLength> = tableLength;

        this.<jdk.internal.jimage.ImageHeader: int locationsSize> = locationsSize;

        this.<jdk.internal.jimage.ImageHeader: int stringsSize> = stringsSize;

        return;
    }

    public static int getHeaderSize()
    {
        return 28;
    }

    static jdk.internal.jimage.ImageHeader readFrom(java.nio.IntBuffer)
    {
        jdk.internal.jimage.ImageHeader $u2;
        java.nio.IntBuffer buffer;
        int $stack11, $stack12, $stack13, majorVersion, minorVersion, $stack14, $stack15, $stack16, $stack17, $stack18, $stack23, $i0;
        java.lang.InternalError $u1;
        java.lang.String $stack25;
        java.lang.StringBuilder $stack22, $stack24, $u0;

        buffer := @parameter0: java.nio.IntBuffer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(buffer);

        $stack11 = virtualinvoke buffer.<java.nio.IntBuffer: int capacity()>();

        if $stack11 == 7 goto label1;

        $u1 = new java.lang.InternalError;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack22 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jimage header not the correct size: ");

        $stack23 = virtualinvoke buffer.<java.nio.IntBuffer: int capacity()>();

        $stack24 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack23);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.lang.InternalError: void <init>(java.lang.String)>($stack25);

        throw $u1;

     label1:
        $stack12 = virtualinvoke buffer.<java.nio.IntBuffer: int get(int)>(0);

        $stack13 = virtualinvoke buffer.<java.nio.IntBuffer: int get(int)>(1);

        majorVersion = $stack13 >>> 16;

        $i0 = (int) 65535;

        minorVersion = $stack13 & $i0;

        $stack14 = virtualinvoke buffer.<java.nio.IntBuffer: int get(int)>(2);

        $stack15 = virtualinvoke buffer.<java.nio.IntBuffer: int get(int)>(3);

        $stack16 = virtualinvoke buffer.<java.nio.IntBuffer: int get(int)>(4);

        $stack17 = virtualinvoke buffer.<java.nio.IntBuffer: int get(int)>(5);

        $stack18 = virtualinvoke buffer.<java.nio.IntBuffer: int get(int)>(6);

        $u2 = new jdk.internal.jimage.ImageHeader;

        specialinvoke $u2.<jdk.internal.jimage.ImageHeader: void <init>(int,int,int,int,int,int,int,int)>($stack12, majorVersion, minorVersion, $stack14, $stack15, $stack16, $stack17, $stack18);

        return $u2;
    }

    public void writeTo(jdk.internal.jimage.ImageStream)
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack3;
        jdk.internal.jimage.ImageStream stream;
        java.nio.ByteBuffer $stack4;

        this := @this: jdk.internal.jimage.ImageHeader;

        stream := @parameter0: jdk.internal.jimage.ImageStream;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(stream);

        $stack3 = staticinvoke <jdk.internal.jimage.ImageHeader: int getHeaderSize()>();

        virtualinvoke stream.<jdk.internal.jimage.ImageStream: void ensure(int)>($stack3);

        $stack4 = virtualinvoke stream.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer getBuffer()>();

        virtualinvoke this.<jdk.internal.jimage.ImageHeader: void writeTo(java.nio.ByteBuffer)>($stack4);

        return;
    }

    public void writeTo(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer buffer;
        jdk.internal.jimage.ImageHeader this;
        int $stack3, $stack5, $stack6, $stack7, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18;

        this := @this: jdk.internal.jimage.ImageHeader;

        buffer := @parameter0: java.nio.ByteBuffer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(buffer);

        $stack3 = this.<jdk.internal.jimage.ImageHeader: int magic>;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack3);

        $stack5 = this.<jdk.internal.jimage.ImageHeader: int majorVersion>;

        $stack7 = $stack5 << 16;

        $stack6 = this.<jdk.internal.jimage.ImageHeader: int minorVersion>;

        $stack8 = $stack7 | $stack6;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack8);

        $stack10 = this.<jdk.internal.jimage.ImageHeader: int flags>;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack10);

        $stack12 = this.<jdk.internal.jimage.ImageHeader: int resourceCount>;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack12);

        $stack14 = this.<jdk.internal.jimage.ImageHeader: int tableLength>;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack14);

        $stack16 = this.<jdk.internal.jimage.ImageHeader: int locationsSize>;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack16);

        $stack18 = this.<jdk.internal.jimage.ImageHeader: int stringsSize>;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack18);

        return;
    }

    public int getMagic()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int magic>;

        return $stack1;
    }

    public int getMajorVersion()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int majorVersion>;

        return $stack1;
    }

    public int getMinorVersion()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int minorVersion>;

        return $stack1;
    }

    public int getFlags()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int flags>;

        return $stack1;
    }

    public int getResourceCount()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int resourceCount>;

        return $stack1;
    }

    public int getTableLength()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int tableLength>;

        return $stack1;
    }

    public int getRedirectSize()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1, $stack2;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int tableLength>;

        $stack2 = $stack1 * 4;

        return $stack2;
    }

    public int getOffsetsSize()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1, $stack2;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int tableLength>;

        $stack2 = $stack1 * 4;

        return $stack2;
    }

    public int getLocationsSize()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int locationsSize>;

        return $stack1;
    }

    public int getStringsSize()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = this.<jdk.internal.jimage.ImageHeader: int stringsSize>;

        return $stack1;
    }

    public int getIndexSize()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = staticinvoke <jdk.internal.jimage.ImageHeader: int getHeaderSize()>();

        $stack2 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getRedirectSize()>();

        $stack3 = $stack1 + $stack2;

        $stack4 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getOffsetsSize()>();

        $stack5 = $stack3 + $stack4;

        $stack6 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getLocationsSize()>();

        $stack7 = $stack5 + $stack6;

        $stack8 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getStringsSize()>();

        $stack9 = $stack7 + $stack8;

        return $stack9;
    }

    int getRedirectOffset()
    {
        int $stack1;
        jdk.internal.jimage.ImageHeader this;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = staticinvoke <jdk.internal.jimage.ImageHeader: int getHeaderSize()>();

        return $stack1;
    }

    int getOffsetsOffset()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1, $stack2, $stack3;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getRedirectOffset()>();

        $stack2 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getRedirectSize()>();

        $stack3 = $stack1 + $stack2;

        return $stack3;
    }

    int getLocationsOffset()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1, $stack2, $stack3;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getOffsetsOffset()>();

        $stack2 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getOffsetsSize()>();

        $stack3 = $stack1 + $stack2;

        return $stack3;
    }

    int getStringsOffset()
    {
        jdk.internal.jimage.ImageHeader this;
        int $stack1, $stack2, $stack3;

        this := @this: jdk.internal.jimage.ImageHeader;

        $stack1 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getLocationsOffset()>();

        $stack2 = virtualinvoke this.<jdk.internal.jimage.ImageHeader: int getLocationsSize()>();

        $stack3 = $stack1 + $stack2;

        return $stack3;
    }

    public static void <clinit>()
    {
        <jdk.internal.jimage.ImageHeader: int HEADER_SLOTS> = 7;

        <jdk.internal.jimage.ImageHeader: int MINOR_VERSION> = 0;

        <jdk.internal.jimage.ImageHeader: int MAJOR_VERSION> = 1;

        <jdk.internal.jimage.ImageHeader: int MAGIC> = -889267494;

        return;
    }
}
