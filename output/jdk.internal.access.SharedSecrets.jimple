public class jdk.internal.access.SharedSecrets extends java.lang.Object
{
    private static final java.lang.invoke.MethodHandles$Lookup lookup;
    private static jdk.internal.access.JavaAWTAccess javaAWTAccess;
    private static jdk.internal.access.JavaAWTFontAccess javaAWTFontAccess;
    private static jdk.internal.access.JavaBeansAccess javaBeansAccess;
    private static jdk.internal.access.JavaLangAccess javaLangAccess;
    private static jdk.internal.access.JavaLangInvokeAccess javaLangInvokeAccess;
    private static jdk.internal.access.JavaLangModuleAccess javaLangModuleAccess;
    private static jdk.internal.access.JavaLangRefAccess javaLangRefAccess;
    private static jdk.internal.access.JavaLangReflectAccess javaLangReflectAccess;
    private static jdk.internal.access.JavaIOAccess javaIOAccess;
    private static jdk.internal.access.JavaIOFileDescriptorAccess javaIOFileDescriptorAccess;
    private static jdk.internal.access.JavaIOFilePermissionAccess javaIOFilePermissionAccess;
    private static jdk.internal.access.JavaIORandomAccessFileAccess javaIORandomAccessFileAccess;
    private static jdk.internal.access.JavaObjectInputStreamReadString javaObjectInputStreamReadString;
    private static jdk.internal.access.JavaObjectInputStreamAccess javaObjectInputStreamAccess;
    private static jdk.internal.access.JavaObjectInputFilterAccess javaObjectInputFilterAccess;
    private static jdk.internal.access.JavaNetInetAddressAccess javaNetInetAddressAccess;
    private static jdk.internal.access.JavaNetHttpCookieAccess javaNetHttpCookieAccess;
    private static jdk.internal.access.JavaNetUriAccess javaNetUriAccess;
    private static jdk.internal.access.JavaNetURLAccess javaNetURLAccess;
    private static jdk.internal.access.JavaNioAccess javaNioAccess;
    private static jdk.internal.access.JavaUtilCollectionAccess javaUtilCollectionAccess;
    private static jdk.internal.access.JavaUtilJarAccess javaUtilJarAccess;
    private static jdk.internal.access.JavaUtilZipFileAccess javaUtilZipFileAccess;
    private static jdk.internal.access.JavaUtilResourceBundleAccess javaUtilResourceBundleAccess;
    private static jdk.internal.access.JavaSecurityAccess javaSecurityAccess;
    private static jdk.internal.access.JavaSecurityPropertiesAccess javaSecurityPropertiesAccess;
    private static jdk.internal.access.JavaSecuritySignatureAccess javaSecuritySignatureAccess;
    private static jdk.internal.access.JavaSecuritySpecAccess javaSecuritySpecAccess;
    private static jdk.internal.access.JavaxCryptoSealedObjectAccess javaxCryptoSealedObjectAccess;
    private static jdk.internal.access.JavaxCryptoSpecAccess javaxCryptoSpecAccess;

    public void <init>()
    {
        jdk.internal.access.SharedSecrets this;

        this := @this: jdk.internal.access.SharedSecrets;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setJavaUtilCollectionAccess(jdk.internal.access.JavaUtilCollectionAccess)
    {
        jdk.internal.access.JavaUtilCollectionAccess juca;

        juca := @parameter0: jdk.internal.access.JavaUtilCollectionAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilCollectionAccess javaUtilCollectionAccess> = juca;

        return;
    }

    public static jdk.internal.access.JavaUtilCollectionAccess getJavaUtilCollectionAccess()
    {
        jdk.internal.access.JavaUtilCollectionAccess access;
        java.lang.ClassNotFoundException $stack4;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilCollectionAccess javaUtilCollectionAccess>;

        if access != null goto label4;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.util.ImmutableCollections$Access", 1, null);

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilCollectionAccess javaUtilCollectionAccess>;

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

     label4:
        return access;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static jdk.internal.access.JavaUtilJarAccess javaUtilJarAccess()
    {
        jdk.internal.access.JavaUtilJarAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilJarAccess javaUtilJarAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/util/jar/JarFile;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilJarAccess javaUtilJarAccess>;

     label1:
        return access;
    }

    public static void setJavaUtilJarAccess(jdk.internal.access.JavaUtilJarAccess)
    {
        jdk.internal.access.JavaUtilJarAccess access;

        access := @parameter0: jdk.internal.access.JavaUtilJarAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilJarAccess javaUtilJarAccess> = access;

        return;
    }

    public static void setJavaLangAccess(jdk.internal.access.JavaLangAccess)
    {
        jdk.internal.access.JavaLangAccess jla;

        jla := @parameter0: jdk.internal.access.JavaLangAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangAccess javaLangAccess> = jla;

        return;
    }

    public static jdk.internal.access.JavaLangAccess getJavaLangAccess()
    {
        jdk.internal.access.JavaLangAccess $stack0;

        $stack0 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangAccess javaLangAccess>;

        return $stack0;
    }

    public static void setJavaLangInvokeAccess(jdk.internal.access.JavaLangInvokeAccess)
    {
        jdk.internal.access.JavaLangInvokeAccess jlia;

        jlia := @parameter0: jdk.internal.access.JavaLangInvokeAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangInvokeAccess javaLangInvokeAccess> = jlia;

        return;
    }

    public static jdk.internal.access.JavaLangInvokeAccess getJavaLangInvokeAccess()
    {
        jdk.internal.access.JavaLangInvokeAccess access;
        java.lang.ClassNotFoundException $stack4;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangInvokeAccess javaLangInvokeAccess>;

        if access != null goto label4;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.lang.invoke.MethodHandleImpl", 1, null);

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangInvokeAccess javaLangInvokeAccess>;

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

     label4:
        return access;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void setJavaLangModuleAccess(jdk.internal.access.JavaLangModuleAccess)
    {
        jdk.internal.access.JavaLangModuleAccess jlrma;

        jlrma := @parameter0: jdk.internal.access.JavaLangModuleAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangModuleAccess javaLangModuleAccess> = jlrma;

        return;
    }

    public static jdk.internal.access.JavaLangModuleAccess getJavaLangModuleAccess()
    {
        jdk.internal.access.JavaLangModuleAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangModuleAccess javaLangModuleAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/lang/module/ModuleDescriptor;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangModuleAccess javaLangModuleAccess>;

     label1:
        return access;
    }

    public static void setJavaLangRefAccess(jdk.internal.access.JavaLangRefAccess)
    {
        jdk.internal.access.JavaLangRefAccess jlra;

        jlra := @parameter0: jdk.internal.access.JavaLangRefAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangRefAccess javaLangRefAccess> = jlra;

        return;
    }

    public static jdk.internal.access.JavaLangRefAccess getJavaLangRefAccess()
    {
        jdk.internal.access.JavaLangRefAccess $stack0;

        $stack0 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangRefAccess javaLangRefAccess>;

        return $stack0;
    }

    public static void setJavaLangReflectAccess(jdk.internal.access.JavaLangReflectAccess)
    {
        jdk.internal.access.JavaLangReflectAccess jlra;

        jlra := @parameter0: jdk.internal.access.JavaLangReflectAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangReflectAccess javaLangReflectAccess> = jlra;

        return;
    }

    public static jdk.internal.access.JavaLangReflectAccess getJavaLangReflectAccess()
    {
        jdk.internal.access.JavaLangReflectAccess $stack0;

        $stack0 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangReflectAccess javaLangReflectAccess>;

        return $stack0;
    }

    public static void setJavaNetUriAccess(jdk.internal.access.JavaNetUriAccess)
    {
        jdk.internal.access.JavaNetUriAccess jnua;

        jnua := @parameter0: jdk.internal.access.JavaNetUriAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetUriAccess javaNetUriAccess> = jnua;

        return;
    }

    public static jdk.internal.access.JavaNetUriAccess getJavaNetUriAccess()
    {
        jdk.internal.access.JavaNetUriAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetUriAccess javaNetUriAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/net/URI;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetUriAccess javaNetUriAccess>;

     label1:
        return access;
    }

    public static void setJavaNetURLAccess(jdk.internal.access.JavaNetURLAccess)
    {
        jdk.internal.access.JavaNetURLAccess jnua;

        jnua := @parameter0: jdk.internal.access.JavaNetURLAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetURLAccess javaNetURLAccess> = jnua;

        return;
    }

    public static jdk.internal.access.JavaNetURLAccess getJavaNetURLAccess()
    {
        jdk.internal.access.JavaNetURLAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetURLAccess javaNetURLAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/net/URL;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetURLAccess javaNetURLAccess>;

     label1:
        return access;
    }

    public static void setJavaNetInetAddressAccess(jdk.internal.access.JavaNetInetAddressAccess)
    {
        jdk.internal.access.JavaNetInetAddressAccess jna;

        jna := @parameter0: jdk.internal.access.JavaNetInetAddressAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetInetAddressAccess javaNetInetAddressAccess> = jna;

        return;
    }

    public static jdk.internal.access.JavaNetInetAddressAccess getJavaNetInetAddressAccess()
    {
        jdk.internal.access.JavaNetInetAddressAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetInetAddressAccess javaNetInetAddressAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/net/InetAddress;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetInetAddressAccess javaNetInetAddressAccess>;

     label1:
        return access;
    }

    public static void setJavaNetHttpCookieAccess(jdk.internal.access.JavaNetHttpCookieAccess)
    {
        jdk.internal.access.JavaNetHttpCookieAccess a;

        a := @parameter0: jdk.internal.access.JavaNetHttpCookieAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetHttpCookieAccess javaNetHttpCookieAccess> = a;

        return;
    }

    public static jdk.internal.access.JavaNetHttpCookieAccess getJavaNetHttpCookieAccess()
    {
        jdk.internal.access.JavaNetHttpCookieAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetHttpCookieAccess javaNetHttpCookieAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/net/HttpCookie;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetHttpCookieAccess javaNetHttpCookieAccess>;

     label1:
        return access;
    }

    public static void setJavaNioAccess(jdk.internal.access.JavaNioAccess)
    {
        jdk.internal.access.JavaNioAccess jna;

        jna := @parameter0: jdk.internal.access.JavaNioAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNioAccess javaNioAccess> = jna;

        return;
    }

    public static jdk.internal.access.JavaNioAccess getJavaNioAccess()
    {
        jdk.internal.access.JavaNioAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNioAccess javaNioAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/nio/Buffer;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNioAccess javaNioAccess>;

     label1:
        return access;
    }

    public static void setJavaIOAccess(jdk.internal.access.JavaIOAccess)
    {
        jdk.internal.access.JavaIOAccess jia;

        jia := @parameter0: jdk.internal.access.JavaIOAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOAccess javaIOAccess> = jia;

        return;
    }

    public static jdk.internal.access.JavaIOAccess getJavaIOAccess()
    {
        jdk.internal.access.JavaIOAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOAccess javaIOAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/io/Console;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOAccess javaIOAccess>;

     label1:
        return access;
    }

    public static void setJavaIOFileDescriptorAccess(jdk.internal.access.JavaIOFileDescriptorAccess)
    {
        jdk.internal.access.JavaIOFileDescriptorAccess jiofda;

        jiofda := @parameter0: jdk.internal.access.JavaIOFileDescriptorAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOFileDescriptorAccess javaIOFileDescriptorAccess> = jiofda;

        return;
    }

    public static jdk.internal.access.JavaIOFilePermissionAccess getJavaIOFilePermissionAccess()
    {
        jdk.internal.access.JavaIOFilePermissionAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOFilePermissionAccess javaIOFilePermissionAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/io/FilePermission;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOFilePermissionAccess javaIOFilePermissionAccess>;

     label1:
        return access;
    }

    public static void setJavaIOFilePermissionAccess(jdk.internal.access.JavaIOFilePermissionAccess)
    {
        jdk.internal.access.JavaIOFilePermissionAccess jiofpa;

        jiofpa := @parameter0: jdk.internal.access.JavaIOFilePermissionAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOFilePermissionAccess javaIOFilePermissionAccess> = jiofpa;

        return;
    }

    public static jdk.internal.access.JavaIOFileDescriptorAccess getJavaIOFileDescriptorAccess()
    {
        jdk.internal.access.JavaIOFileDescriptorAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOFileDescriptorAccess javaIOFileDescriptorAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/io/FileDescriptor;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIOFileDescriptorAccess javaIOFileDescriptorAccess>;

     label1:
        return access;
    }

    public static void setJavaSecurityAccess(jdk.internal.access.JavaSecurityAccess)
    {
        jdk.internal.access.JavaSecurityAccess jsa;

        jsa := @parameter0: jdk.internal.access.JavaSecurityAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecurityAccess javaSecurityAccess> = jsa;

        return;
    }

    public static jdk.internal.access.JavaSecurityAccess getJavaSecurityAccess()
    {
        jdk.internal.access.JavaSecurityAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecurityAccess javaSecurityAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/security/ProtectionDomain;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecurityAccess javaSecurityAccess>;

     label1:
        return access;
    }

    public static void setJavaSecurityPropertiesAccess(jdk.internal.access.JavaSecurityPropertiesAccess)
    {
        jdk.internal.access.JavaSecurityPropertiesAccess jspa;

        jspa := @parameter0: jdk.internal.access.JavaSecurityPropertiesAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecurityPropertiesAccess javaSecurityPropertiesAccess> = jspa;

        return;
    }

    public static jdk.internal.access.JavaSecurityPropertiesAccess getJavaSecurityPropertiesAccess()
    {
        jdk.internal.access.JavaSecurityPropertiesAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecurityPropertiesAccess javaSecurityPropertiesAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/security/Security;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecurityPropertiesAccess javaSecurityPropertiesAccess>;

     label1:
        return access;
    }

    public static jdk.internal.access.JavaUtilZipFileAccess getJavaUtilZipFileAccess()
    {
        jdk.internal.access.JavaUtilZipFileAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilZipFileAccess javaUtilZipFileAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/util/zip/ZipFile;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilZipFileAccess javaUtilZipFileAccess>;

     label1:
        return access;
    }

    public static void setJavaUtilZipFileAccess(jdk.internal.access.JavaUtilZipFileAccess)
    {
        jdk.internal.access.JavaUtilZipFileAccess access;

        access := @parameter0: jdk.internal.access.JavaUtilZipFileAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilZipFileAccess javaUtilZipFileAccess> = access;

        return;
    }

    public static void setJavaAWTAccess(jdk.internal.access.JavaAWTAccess)
    {
        jdk.internal.access.JavaAWTAccess jaa;

        jaa := @parameter0: jdk.internal.access.JavaAWTAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaAWTAccess javaAWTAccess> = jaa;

        return;
    }

    public static jdk.internal.access.JavaAWTAccess getJavaAWTAccess()
    {
        jdk.internal.access.JavaAWTAccess $stack0;

        $stack0 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaAWTAccess javaAWTAccess>;

        return $stack0;
    }

    public static void setJavaAWTFontAccess(jdk.internal.access.JavaAWTFontAccess)
    {
        jdk.internal.access.JavaAWTFontAccess jafa;

        jafa := @parameter0: jdk.internal.access.JavaAWTFontAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaAWTFontAccess javaAWTFontAccess> = jafa;

        return;
    }

    public static jdk.internal.access.JavaAWTFontAccess getJavaAWTFontAccess()
    {
        jdk.internal.access.JavaAWTFontAccess $stack0;

        $stack0 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaAWTFontAccess javaAWTFontAccess>;

        return $stack0;
    }

    public static jdk.internal.access.JavaBeansAccess getJavaBeansAccess()
    {
        jdk.internal.access.JavaBeansAccess $stack0;

        $stack0 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaBeansAccess javaBeansAccess>;

        return $stack0;
    }

    public static void setJavaBeansAccess(jdk.internal.access.JavaBeansAccess)
    {
        jdk.internal.access.JavaBeansAccess access;

        access := @parameter0: jdk.internal.access.JavaBeansAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaBeansAccess javaBeansAccess> = access;

        return;
    }

    public static jdk.internal.access.JavaUtilResourceBundleAccess getJavaUtilResourceBundleAccess()
    {
        jdk.internal.access.JavaUtilResourceBundleAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilResourceBundleAccess javaUtilResourceBundleAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/util/ResourceBundle;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilResourceBundleAccess javaUtilResourceBundleAccess>;

     label1:
        return access;
    }

    public static void setJavaUtilResourceBundleAccess(jdk.internal.access.JavaUtilResourceBundleAccess)
    {
        jdk.internal.access.JavaUtilResourceBundleAccess access;

        access := @parameter0: jdk.internal.access.JavaUtilResourceBundleAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilResourceBundleAccess javaUtilResourceBundleAccess> = access;

        return;
    }

    public static jdk.internal.access.JavaObjectInputStreamReadString getJavaObjectInputStreamReadString()
    {
        jdk.internal.access.JavaObjectInputStreamReadString access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputStreamReadString javaObjectInputStreamReadString>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/io/ObjectInputStream;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputStreamReadString javaObjectInputStreamReadString>;

     label1:
        return access;
    }

    public static void setJavaObjectInputStreamReadString(jdk.internal.access.JavaObjectInputStreamReadString)
    {
        jdk.internal.access.JavaObjectInputStreamReadString access;

        access := @parameter0: jdk.internal.access.JavaObjectInputStreamReadString;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputStreamReadString javaObjectInputStreamReadString> = access;

        return;
    }

    public static jdk.internal.access.JavaObjectInputStreamAccess getJavaObjectInputStreamAccess()
    {
        jdk.internal.access.JavaObjectInputStreamAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputStreamAccess javaObjectInputStreamAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/io/ObjectInputStream;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputStreamAccess javaObjectInputStreamAccess>;

     label1:
        return access;
    }

    public static void setJavaObjectInputStreamAccess(jdk.internal.access.JavaObjectInputStreamAccess)
    {
        jdk.internal.access.JavaObjectInputStreamAccess access;

        access := @parameter0: jdk.internal.access.JavaObjectInputStreamAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputStreamAccess javaObjectInputStreamAccess> = access;

        return;
    }

    public static jdk.internal.access.JavaObjectInputFilterAccess getJavaObjectInputFilterAccess()
    {
        jdk.internal.access.JavaObjectInputFilterAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputFilterAccess javaObjectInputFilterAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/io/ObjectInputFilter$Config;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputFilterAccess javaObjectInputFilterAccess>;

     label1:
        return access;
    }

    public static void setJavaObjectInputFilterAccess(jdk.internal.access.JavaObjectInputFilterAccess)
    {
        jdk.internal.access.JavaObjectInputFilterAccess access;

        access := @parameter0: jdk.internal.access.JavaObjectInputFilterAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaObjectInputFilterAccess javaObjectInputFilterAccess> = access;

        return;
    }

    public static void setJavaIORandomAccessFileAccess(jdk.internal.access.JavaIORandomAccessFileAccess)
    {
        jdk.internal.access.JavaIORandomAccessFileAccess jirafa;

        jirafa := @parameter0: jdk.internal.access.JavaIORandomAccessFileAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIORandomAccessFileAccess javaIORandomAccessFileAccess> = jirafa;

        return;
    }

    public static jdk.internal.access.JavaIORandomAccessFileAccess getJavaIORandomAccessFileAccess()
    {
        jdk.internal.access.JavaIORandomAccessFileAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIORandomAccessFileAccess javaIORandomAccessFileAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/io/RandomAccessFile;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaIORandomAccessFileAccess javaIORandomAccessFileAccess>;

     label1:
        return access;
    }

    public static void setJavaSecuritySignatureAccess(jdk.internal.access.JavaSecuritySignatureAccess)
    {
        jdk.internal.access.JavaSecuritySignatureAccess jssa;

        jssa := @parameter0: jdk.internal.access.JavaSecuritySignatureAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecuritySignatureAccess javaSecuritySignatureAccess> = jssa;

        return;
    }

    public static jdk.internal.access.JavaSecuritySignatureAccess getJavaSecuritySignatureAccess()
    {
        jdk.internal.access.JavaSecuritySignatureAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecuritySignatureAccess javaSecuritySignatureAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/security/Signature;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecuritySignatureAccess javaSecuritySignatureAccess>;

     label1:
        return access;
    }

    public static void setJavaSecuritySpecAccess(jdk.internal.access.JavaSecuritySpecAccess)
    {
        jdk.internal.access.JavaSecuritySpecAccess jssa;

        jssa := @parameter0: jdk.internal.access.JavaSecuritySpecAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecuritySpecAccess javaSecuritySpecAccess> = jssa;

        return;
    }

    public static jdk.internal.access.JavaSecuritySpecAccess getJavaSecuritySpecAccess()
    {
        jdk.internal.access.JavaSecuritySpecAccess $stack0, $stack1;

        $stack0 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecuritySpecAccess javaSecuritySpecAccess>;

        if $stack0 != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljava/security/spec/EncodedKeySpec;");

     label1:
        $stack1 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaSecuritySpecAccess javaSecuritySpecAccess>;

        return $stack1;
    }

    public static void setJavaxCryptoSpecAccess(jdk.internal.access.JavaxCryptoSpecAccess)
    {
        jdk.internal.access.JavaxCryptoSpecAccess jcsa;

        jcsa := @parameter0: jdk.internal.access.JavaxCryptoSpecAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaxCryptoSpecAccess javaxCryptoSpecAccess> = jcsa;

        return;
    }

    public static jdk.internal.access.JavaxCryptoSpecAccess getJavaxCryptoSpecAccess()
    {
        jdk.internal.access.JavaxCryptoSpecAccess $stack0, $stack1;

        $stack0 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaxCryptoSpecAccess javaxCryptoSpecAccess>;

        if $stack0 != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljavax/crypto/spec/SecretKeySpec;");

     label1:
        $stack1 = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaxCryptoSpecAccess javaxCryptoSpecAccess>;

        return $stack1;
    }

    public static void setJavaxCryptoSealedObjectAccess(jdk.internal.access.JavaxCryptoSealedObjectAccess)
    {
        jdk.internal.access.JavaxCryptoSealedObjectAccess jcsoa;

        jcsoa := @parameter0: jdk.internal.access.JavaxCryptoSealedObjectAccess;

        <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaxCryptoSealedObjectAccess javaxCryptoSealedObjectAccess> = jcsoa;

        return;
    }

    public static jdk.internal.access.JavaxCryptoSealedObjectAccess getJavaxCryptoSealedObjectAccess()
    {
        jdk.internal.access.JavaxCryptoSealedObjectAccess access;

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaxCryptoSealedObjectAccess javaxCryptoSealedObjectAccess>;

        if access != null goto label1;

        staticinvoke <jdk.internal.access.SharedSecrets: void ensureClassInitialized(java.lang.Class)>(class "Ljavax/crypto/SealedObject;");

        access = <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaxCryptoSealedObjectAccess javaxCryptoSealedObjectAccess>;

     label1:
        return access;
    }

    private static void ensureClassInitialized(java.lang.Class)
    {
        java.lang.invoke.MethodHandles$Lookup $stack2;
        java.lang.Class c;
        java.lang.IllegalAccessException $stack4;

        c := @parameter0: java.lang.Class;

     label1:
        $stack2 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>();

        virtualinvoke $stack2.<java.lang.invoke.MethodHandles$Lookup: java.lang.Class ensureInitialized(java.lang.Class)>(c);

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.invoke.MethodHandles$Lookup $stack0;

        $stack0 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>();

        <jdk.internal.access.SharedSecrets: java.lang.invoke.MethodHandles$Lookup lookup> = $stack0;

        return;
    }
}
