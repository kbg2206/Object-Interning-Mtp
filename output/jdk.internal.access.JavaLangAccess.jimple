public interface  jdk.internal.access.JavaLangAccess extends java.lang.Object
{

    public abstract transient java.util.List getDeclaredPublicMethods(java.lang.Class, java.lang.String, java.lang.Class[]);

    public abstract jdk.internal.reflect.ConstantPool getConstantPool(java.lang.Class);

    public abstract boolean casAnnotationType(java.lang.Class, sun.reflect.'annotation'.AnnotationType, sun.reflect.'annotation'.AnnotationType);

    public abstract sun.reflect.'annotation'.AnnotationType getAnnotationType(java.lang.Class);

    public abstract java.util.Map getDeclaredAnnotationMap(java.lang.Class);

    public abstract byte[] getRawClassAnnotations(java.lang.Class);

    public abstract byte[] getRawClassTypeAnnotations(java.lang.Class);

    public abstract byte[] getRawExecutableTypeAnnotations(java.lang.reflect.Executable);

    public abstract java.lang.Enum[] getEnumConstantsShared(java.lang.Class);

    public abstract void blockedOn(sun.nio.ch.Interruptible);

    public abstract void registerShutdownHook(int, boolean, java.lang.Runnable);

    public abstract java.lang.Thread newThreadWithAcc(java.lang.Runnable, java.security.AccessControlContext);

    public abstract void invokeFinalize(java.lang.Object) throws java.lang.Throwable;

    public abstract java.util.concurrent.ConcurrentHashMap createOrGetClassLoaderValueMap(java.lang.ClassLoader);

    public abstract java.lang.Class defineClass(java.lang.ClassLoader, java.lang.String, byte[], java.security.ProtectionDomain, java.lang.String);

    public abstract java.lang.Class defineClass(java.lang.ClassLoader, java.lang.Class, java.lang.String, byte[], java.security.ProtectionDomain, boolean, int, java.lang.Object);

    public abstract java.lang.Class findBootstrapClassOrNull(java.lang.String);

    public abstract java.lang.Package definePackage(java.lang.ClassLoader, java.lang.String, java.lang.Module);

    public abstract java.lang.String fastUUID(long, long);

    public abstract void addNonExportedPackages(java.lang.ModuleLayer);

    public abstract void invalidatePackageAccessCache();

    public abstract java.lang.Module defineModule(java.lang.ClassLoader, java.lang.module.ModuleDescriptor, java.net.URI);

    public abstract java.lang.Module defineUnnamedModule(java.lang.ClassLoader);

    public abstract void addReads(java.lang.Module, java.lang.Module);

    public abstract void addReadsAllUnnamed(java.lang.Module);

    public abstract void addExports(java.lang.Module, java.lang.String);

    public abstract void addExports(java.lang.Module, java.lang.String, java.lang.Module);

    public abstract void addExportsToAllUnnamed(java.lang.Module, java.lang.String);

    public abstract void addOpens(java.lang.Module, java.lang.String, java.lang.Module);

    public abstract void addOpensToAllUnnamed(java.lang.Module, java.lang.String);

    public abstract void addOpensToAllUnnamed(java.lang.Module, java.util.Set, java.util.Set);

    public abstract void addUses(java.lang.Module, java.lang.Class);

    public abstract boolean isReflectivelyExported(java.lang.Module, java.lang.String, java.lang.Module);

    public abstract boolean isReflectivelyOpened(java.lang.Module, java.lang.String, java.lang.Module);

    public abstract java.lang.Module addEnableNativeAccess(java.lang.Module);

    public abstract void addEnableNativeAccessAllUnnamed();

    public abstract boolean isEnableNativeAccess(java.lang.Module);

    public abstract jdk.internal.module.ServicesCatalog getServicesCatalog(java.lang.ModuleLayer);

    public abstract void bindToLoader(java.lang.ModuleLayer, java.lang.ClassLoader);

    public abstract java.util.stream.Stream layers(java.lang.ModuleLayer);

    public abstract java.util.stream.Stream layers(java.lang.ClassLoader);

    public abstract java.lang.String newStringNoRepl(byte[], java.nio.charset.Charset) throws java.nio.charset.CharacterCodingException;

    public abstract byte[] getBytesNoRepl(java.lang.String, java.nio.charset.Charset) throws java.nio.charset.CharacterCodingException;

    public abstract java.lang.String newStringUTF8NoRepl(byte[], int, int);

    public abstract byte[] getBytesUTF8NoRepl(java.lang.String);

    public abstract void inflateBytesToChars(byte[], int, char[], int, int);

    public abstract int decodeASCII(byte[], int, char[], int, int);

    public abstract int encodeASCII(char[], int, byte[], int, int);

    public abstract void setCause(java.lang.Throwable, java.lang.Throwable);

    public abstract java.security.ProtectionDomain protectionDomain(java.lang.Class);

    public abstract java.lang.invoke.MethodHandle stringConcatHelper(java.lang.String, java.lang.invoke.MethodType);

    public abstract long stringConcatInitialCoder();

    public abstract long stringConcatMix(long, java.lang.String);

    public abstract java.lang.String join(java.lang.String, java.lang.String, java.lang.String, java.lang.String[], int);

    public abstract java.lang.Object classData(java.lang.Class);

    public abstract long findNative(java.lang.ClassLoader, java.lang.String);

    public abstract void exit(int);

    public abstract java.lang.String getLoaderNameID(java.lang.ClassLoader);
}
