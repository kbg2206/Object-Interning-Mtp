public class jdk.internal.perf.PerfCounter extends java.lang.Object
{
    private static final jdk.internal.perf.Perf perf;
    private static final int V_Constant;
    private static final int V_Monotonic;
    private static final int V_Variable;
    private static final int U_None;
    private final java.lang.String name;
    private final java.nio.LongBuffer lb;

    private void <init>(java.lang.String, int)
    {
        jdk.internal.perf.PerfCounter this;
        java.nio.ByteOrder $stack6;
        int type;
        java.nio.LongBuffer $stack8;
        java.lang.String name;
        java.nio.ByteBuffer $stack5;
        jdk.internal.perf.Perf $stack4;

        this := @this: jdk.internal.perf.PerfCounter;

        name := @parameter0: java.lang.String;

        type := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.perf.PerfCounter: java.lang.String name> = name;

        $stack4 = <jdk.internal.perf.PerfCounter: jdk.internal.perf.Perf perf>;

        $stack5 = virtualinvoke $stack4.<jdk.internal.perf.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>(name, type, 1, 0L);

        $stack6 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke $stack5.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($stack6);

        $stack8 = virtualinvoke $stack5.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>();

        this.<jdk.internal.perf.PerfCounter: java.nio.LongBuffer lb> = $stack8;

        return;
    }

    public static jdk.internal.perf.PerfCounter newPerfCounter(java.lang.String)
    {
        jdk.internal.perf.PerfCounter $stack1;
        java.lang.String name;

        name := @parameter0: java.lang.String;

        $stack1 = new jdk.internal.perf.PerfCounter;

        specialinvoke $stack1.<jdk.internal.perf.PerfCounter: void <init>(java.lang.String,int)>(name, 3);

        return $stack1;
    }

    public static jdk.internal.perf.PerfCounter newConstantPerfCounter(java.lang.String)
    {
        jdk.internal.perf.PerfCounter $stack2;
        java.lang.String name;

        name := @parameter0: java.lang.String;

        $stack2 = new jdk.internal.perf.PerfCounter;

        specialinvoke $stack2.<jdk.internal.perf.PerfCounter: void <init>(java.lang.String,int)>(name, 1);

        return $stack2;
    }

    public synchronized long get()
    {
        jdk.internal.perf.PerfCounter this;
        java.nio.LongBuffer $stack1;
        long $stack2;

        this := @this: jdk.internal.perf.PerfCounter;

        $stack1 = this.<jdk.internal.perf.PerfCounter: java.nio.LongBuffer lb>;

        $stack2 = virtualinvoke $stack1.<java.nio.LongBuffer: long get(int)>(0);

        return $stack2;
    }

    public synchronized void set(long)
    {
        jdk.internal.perf.PerfCounter this;
        long newValue;
        java.nio.LongBuffer $stack3;

        this := @this: jdk.internal.perf.PerfCounter;

        newValue := @parameter0: long;

        $stack3 = this.<jdk.internal.perf.PerfCounter: java.nio.LongBuffer lb>;

        virtualinvoke $stack3.<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>(0, newValue);

        return;
    }

    public synchronized void add(long)
    {
        jdk.internal.perf.PerfCounter this;
        long $stack5, value, res;
        java.nio.LongBuffer $stack6;

        this := @this: jdk.internal.perf.PerfCounter;

        value := @parameter0: long;

        $stack5 = virtualinvoke this.<jdk.internal.perf.PerfCounter: long get()>();

        res = $stack5 + value;

        $stack6 = this.<jdk.internal.perf.PerfCounter: java.nio.LongBuffer lb>;

        virtualinvoke $stack6.<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>(0, res);

        return;
    }

    public void increment()
    {
        jdk.internal.perf.PerfCounter this;

        this := @this: jdk.internal.perf.PerfCounter;

        virtualinvoke this.<jdk.internal.perf.PerfCounter: void add(long)>(1L);

        return;
    }

    public void addTime(long)
    {
        jdk.internal.perf.PerfCounter this;
        long interval;

        this := @this: jdk.internal.perf.PerfCounter;

        interval := @parameter0: long;

        virtualinvoke this.<jdk.internal.perf.PerfCounter: void add(long)>(interval);

        return;
    }

    public void addElapsedTimeFrom(long)
    {
        jdk.internal.perf.PerfCounter this;
        long $stack3, startTime, $stack4;

        this := @this: jdk.internal.perf.PerfCounter;

        startTime := @parameter0: long;

        $stack3 = staticinvoke <java.lang.System: long nanoTime()>();

        $stack4 = $stack3 - startTime;

        virtualinvoke this.<jdk.internal.perf.PerfCounter: void add(long)>($stack4);

        return;
    }

    public java.lang.String toString()
    {
        jdk.internal.perf.PerfCounter this;
        long $stack5;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack6;
        java.lang.String $stack2, $stack7;

        this := @this: jdk.internal.perf.PerfCounter;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<jdk.internal.perf.PerfCounter: java.lang.String name>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $stack5 = virtualinvoke this.<jdk.internal.perf.PerfCounter: long get()>();

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }

    public static jdk.internal.perf.PerfCounter getFindClasses()
    {
        jdk.internal.perf.PerfCounter $stack0;

        $stack0 = <jdk.internal.perf.PerfCounter$CoreCounters: jdk.internal.perf.PerfCounter lc>;

        return $stack0;
    }

    public static jdk.internal.perf.PerfCounter getFindClassTime()
    {
        jdk.internal.perf.PerfCounter $stack0;

        $stack0 = <jdk.internal.perf.PerfCounter$CoreCounters: jdk.internal.perf.PerfCounter lct>;

        return $stack0;
    }

    public static jdk.internal.perf.PerfCounter getReadClassBytesTime()
    {
        jdk.internal.perf.PerfCounter $stack0;

        $stack0 = <jdk.internal.perf.PerfCounter$CoreCounters: jdk.internal.perf.PerfCounter rcbt>;

        return $stack0;
    }

    public static jdk.internal.perf.PerfCounter getParentDelegationTime()
    {
        jdk.internal.perf.PerfCounter $stack0;

        $stack0 = <jdk.internal.perf.PerfCounter$CoreCounters: jdk.internal.perf.PerfCounter pdt>;

        return $stack0;
    }

    public static jdk.internal.perf.PerfCounter getZipFileCount()
    {
        jdk.internal.perf.PerfCounter $stack0;

        $stack0 = <jdk.internal.perf.PerfCounter$CoreCounters: jdk.internal.perf.PerfCounter zfc>;

        return $stack0;
    }

    public static jdk.internal.perf.PerfCounter getZipFileOpenTime()
    {
        jdk.internal.perf.PerfCounter $stack0;

        $stack0 = <jdk.internal.perf.PerfCounter$CoreCounters: jdk.internal.perf.PerfCounter zfot>;

        return $stack0;
    }

    static void <clinit>()
    {
        jdk.internal.perf.Perf$GetPerfAction $stack0;
        java.lang.Object $stack1;
        jdk.internal.perf.Perf $stack2;

        <jdk.internal.perf.PerfCounter: int U_None> = 1;

        <jdk.internal.perf.PerfCounter: int V_Variable> = 3;

        <jdk.internal.perf.PerfCounter: int V_Monotonic> = 2;

        <jdk.internal.perf.PerfCounter: int V_Constant> = 1;

        $stack0 = new jdk.internal.perf.Perf$GetPerfAction;

        specialinvoke $stack0.<jdk.internal.perf.Perf$GetPerfAction: void <init>()>();

        $stack1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($stack0);

        $stack2 = (jdk.internal.perf.Perf) $stack1;

        <jdk.internal.perf.PerfCounter: jdk.internal.perf.Perf perf> = $stack2;

        return;
    }
}
