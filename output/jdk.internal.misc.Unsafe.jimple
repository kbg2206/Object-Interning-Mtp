public final class jdk.internal.misc.Unsafe extends java.lang.Object
{
    private static final jdk.internal.misc.Unsafe theUnsafe;
    public static final int INVALID_FIELD_OFFSET;
    public static final int ARRAY_BOOLEAN_BASE_OFFSET;
    public static final int ARRAY_BYTE_BASE_OFFSET;
    public static final int ARRAY_SHORT_BASE_OFFSET;
    public static final int ARRAY_CHAR_BASE_OFFSET;
    public static final int ARRAY_INT_BASE_OFFSET;
    public static final int ARRAY_LONG_BASE_OFFSET;
    public static final int ARRAY_FLOAT_BASE_OFFSET;
    public static final int ARRAY_DOUBLE_BASE_OFFSET;
    public static final int ARRAY_OBJECT_BASE_OFFSET;
    public static final int ARRAY_BOOLEAN_INDEX_SCALE;
    public static final int ARRAY_BYTE_INDEX_SCALE;
    public static final int ARRAY_SHORT_INDEX_SCALE;
    public static final int ARRAY_CHAR_INDEX_SCALE;
    public static final int ARRAY_INT_INDEX_SCALE;
    public static final int ARRAY_LONG_INDEX_SCALE;
    public static final int ARRAY_FLOAT_INDEX_SCALE;
    public static final int ARRAY_DOUBLE_INDEX_SCALE;
    public static final int ARRAY_OBJECT_INDEX_SCALE;
    public static final int ADDRESS_SIZE;

    private static native void registerNatives();

    private void <init>()
    {
        jdk.internal.misc.Unsafe this;

        this := @this: jdk.internal.misc.Unsafe;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static jdk.internal.misc.Unsafe getUnsafe()
    {
        jdk.internal.misc.Unsafe $stack0;

        $stack0 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        return $stack0;
    }

    public native int getInt(java.lang.Object, long);

    public native void putInt(java.lang.Object, long, int);

    public native java.lang.Object getReference(java.lang.Object, long);

    public native void putReference(java.lang.Object, long, java.lang.Object);

    public native boolean getBoolean(java.lang.Object, long);

    public native void putBoolean(java.lang.Object, long, boolean);

    public native byte getByte(java.lang.Object, long);

    public native void putByte(java.lang.Object, long, byte);

    public native short getShort(java.lang.Object, long);

    public native void putShort(java.lang.Object, long, short);

    public native char getChar(java.lang.Object, long);

    public native void putChar(java.lang.Object, long, char);

    public native long getLong(java.lang.Object, long);

    public native void putLong(java.lang.Object, long, long);

    public native float getFloat(java.lang.Object, long);

    public native void putFloat(java.lang.Object, long, float);

    public native double getDouble(java.lang.Object, long);

    public native void putDouble(java.lang.Object, long, double);

    public long getAddress(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        int $stack4, $stack6;
        java.lang.Object o;
        long offset, $stack5, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $stack4 != 4 goto label1;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = staticinvoke <java.lang.Integer: long toUnsignedLong(int)>($stack6);

        return $stack7;

     label1:
        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        return $stack5;
    }

    public void putAddress(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, $stack7;
        java.lang.Object o;
        long offset, x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: long;

        $stack6 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $stack6 != 4 goto label1;

        $stack7 = (int) x;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(o, offset, $stack7);

        goto label2;

     label1:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLong(java.lang.Object,long,long)>(o, offset, x);

     label2:
        return;
    }

    public native java.lang.Object getUncompressedObject(long);

    public byte getByte(long)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        byte $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(null, address);

        return $stack3;
    }

    public void putByte(long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        byte x;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        x := @parameter1: byte;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(null, address, x);

        return;
    }

    public short getShort(long)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        short $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(null, address);

        return $stack3;
    }

    public void putShort(long, short)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        short x;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        x := @parameter1: short;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(null, address, x);

        return;
    }

    public char getChar(long)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        char $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = virtualinvoke this.<jdk.internal.misc.Unsafe: char getChar(java.lang.Object,long)>(null, address);

        return $stack3;
    }

    public void putChar(long, char)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        char x;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        x := @parameter1: char;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putChar(java.lang.Object,long,char)>(null, address, x);

        return;
    }

    public int getInt(long)
    {
        jdk.internal.misc.Unsafe this;
        int $stack3;
        long address;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(null, address);

        return $stack3;
    }

    public void putInt(long, int)
    {
        jdk.internal.misc.Unsafe this;
        int x;
        long address;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        x := @parameter1: int;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(null, address, x);

        return;
    }

    public long getLong(long)
    {
        jdk.internal.misc.Unsafe this;
        long address, $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(null, address);

        return $stack3;
    }

    public void putLong(long, long)
    {
        jdk.internal.misc.Unsafe this;
        long address, x;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        x := @parameter1: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLong(java.lang.Object,long,long)>(null, address, x);

        return;
    }

    public float getFloat(long)
    {
        jdk.internal.misc.Unsafe this;
        float $stack3;
        long address;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = virtualinvoke this.<jdk.internal.misc.Unsafe: float getFloat(java.lang.Object,long)>(null, address);

        return $stack3;
    }

    public void putFloat(long, float)
    {
        jdk.internal.misc.Unsafe this;
        float x;
        long address;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        x := @parameter1: float;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putFloat(java.lang.Object,long,float)>(null, address, x);

        return;
    }

    public double getDouble(long)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        double $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = virtualinvoke this.<jdk.internal.misc.Unsafe: double getDouble(java.lang.Object,long)>(null, address);

        return $stack3;
    }

    public void putDouble(long, double)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        double x;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        x := @parameter1: double;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putDouble(java.lang.Object,long,double)>(null, address, x);

        return;
    }

    public long getAddress(long)
    {
        jdk.internal.misc.Unsafe this;
        long address, $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getAddress(java.lang.Object,long)>(null, address);

        return $stack3;
    }

    public void putAddress(long, long)
    {
        jdk.internal.misc.Unsafe this;
        long address, x;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        x := @parameter1: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putAddress(java.lang.Object,long,long)>(null, address, x);

        return;
    }

    private java.lang.RuntimeException invalidInput()
    {
        jdk.internal.misc.Unsafe this;
        java.lang.IllegalArgumentException $stack1;

        this := @this: jdk.internal.misc.Unsafe;

        $stack1 = new java.lang.IllegalArgumentException;

        specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>()>();

        return $stack1;
    }

    private boolean is32BitClean(long)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack4;
        long value, $stack3;
        boolean $stack5;

        this := @this: jdk.internal.misc.Unsafe;

        value := @parameter0: long;

        $stack3 = value >>> 32;

        $stack4 = $stack3 cmp 0L;

        if $stack4 != 0 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        return $stack5;
    }

    private void checkSize(long)
    {
        jdk.internal.misc.Unsafe this;
        long size;
        java.lang.RuntimeException $stack5, $stack7;
        byte $stack4;
        int $stack3, $i0;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        size := @parameter0: long;

        $stack3 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $stack3 != 4 goto label1;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean is32BitClean(long)>(size);

        if $stack6 != 0 goto label2;

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack7;

     label1:
        $stack4 = size cmp 0L;

        $i0 = (int) $stack4;

        if $i0 >= 0 goto label2;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack5;

     label2:
        return;
    }

    private void checkNativeAddress(long)
    {
        jdk.internal.misc.Unsafe this;
        long address, $stack4, $stack5, $stack6;
        java.lang.RuntimeException $stack8;
        byte $stack7;
        int $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $stack3 != 4 goto label1;

        $stack4 = address >> 32;

        $stack5 = $stack4 + 1L;

        $stack6 = $stack5 & -2L;

        $stack7 = $stack6 cmp 0L;

        if $stack7 == 0 goto label1;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack8;

     label1:
        return;
    }

    private void checkOffset(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        java.lang.RuntimeException $stack6, $stack8;
        byte $stack5;
        int $stack4, $i0;
        java.lang.Object o;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $stack4 != 4 goto label1;

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean is32BitClean(long)>(offset);

        if $stack7 != 0 goto label2;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack8;

     label1:
        $stack5 = offset cmp 0L;

        $i0 = (int) $stack5;

        if $i0 >= 0 goto label2;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack6;

     label2:
        return;
    }

    private void checkPointer(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        if o != null goto label1;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkNativeAddress(long)>(offset);

        goto label2;

     label1:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkOffset(java.lang.Object,long)>(o, offset);

     label2:
        return;
    }

    private void checkPrimitiveArray(java.lang.Class)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Class c, $stack3;
        java.lang.RuntimeException $stack4;
        boolean $stack5;

        this := @this: jdk.internal.misc.Unsafe;

        c := @parameter0: java.lang.Class;

        $stack3 = virtualinvoke c.<java.lang.Class: java.lang.Class getComponentType()>();

        if $stack3 == null goto label1;

        $stack5 = virtualinvoke $stack3.<java.lang.Class: boolean isPrimitive()>();

        if $stack5 != 0 goto label2;

     label1:
        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack4;

     label2:
        return;
    }

    private void checkPrimitivePointer(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        java.lang.Class $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPointer(java.lang.Object,long)>(o, offset);

        if o == null goto label1;

        $stack4 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPrimitiveArray(java.lang.Class)>($stack4);

     label1:
        return;
    }

    private long alignToHeapWordSize(long)
    {
        jdk.internal.misc.Unsafe this;
        long bytes, $stack6, $stack7, $stack11, $stack12, $stack13;
        java.lang.RuntimeException $stack4;
        byte $stack3;
        int $stack5, $stack8, $stack9, $stack10, $i0, $i1;

        this := @this: jdk.internal.misc.Unsafe;

        bytes := @parameter0: long;

        $stack3 = bytes cmp 0L;

        $i0 = (int) $stack3;

        if $i0 < 0 goto label1;

        $stack5 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        $stack6 = (long) $stack5;

        $stack7 = bytes + $stack6;

        $stack12 = $stack7 - 1L;

        $stack8 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        $stack9 = $stack8 - 1;

        $i1 = (int) -1;

        $stack10 = $stack9 ^ $i1;

        $stack11 = (long) $stack10;

        $stack13 = $stack12 & $stack11;

        return $stack13;

     label1:
        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack4;
    }

    public long allocateMemory(long)
    {
        jdk.internal.misc.Unsafe this;
        long $stack5, $stack7, bytes;
        byte $stack6, $stack8;
        java.lang.StringBuilder $stack10, $stack11, $stack12, $stack13;
        java.lang.String $stack14;
        java.lang.OutOfMemoryError $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        bytes := @parameter0: long;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: long alignToHeapWordSize(long)>(bytes);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void allocateMemoryChecks(long)>($stack5);

        $stack6 = $stack5 cmp 0L;

        if $stack6 != 0 goto label1;

        return 0L;

     label1:
        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: long allocateMemory0(long)>($stack5);

        $stack8 = $stack7 cmp 0L;

        if $stack8 != 0 goto label2;

        $stack9 = new java.lang.OutOfMemoryError;

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to allocate ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($stack5);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack9.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($stack14);

        throw $stack9;

     label2:
        return $stack7;
    }

    private void allocateMemoryChecks(long)
    {
        jdk.internal.misc.Unsafe this;
        long bytes;

        this := @this: jdk.internal.misc.Unsafe;

        bytes := @parameter0: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkSize(long)>(bytes);

        return;
    }

    public long reallocateMemory(long, long)
    {
        jdk.internal.misc.Unsafe this;
        long $stack7, address, bytes, $stack10;
        byte $stack8, $stack9, $stack11;
        java.lang.StringBuilder $stack13, $stack14, $stack15, $stack16;
        java.lang.String $stack17;
        java.lang.OutOfMemoryError $stack12;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        bytes := @parameter1: long;

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: long alignToHeapWordSize(long)>(bytes);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void reallocateMemoryChecks(long,long)>(address, $stack7);

        $stack8 = $stack7 cmp 0L;

        if $stack8 != 0 goto label1;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void freeMemory(long)>(address);

        return 0L;

     label1:
        $stack9 = address cmp 0L;

        if $stack9 != 0 goto label2;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: long allocateMemory0(long)>($stack7);

        goto label3;

     label2:
        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: long reallocateMemory0(long,long)>(address, $stack7);

     label3:
        $stack11 = $stack10 cmp 0L;

        if $stack11 != 0 goto label4;

        $stack12 = new java.lang.OutOfMemoryError;

        $stack13 = new java.lang.StringBuilder;

        specialinvoke $stack13.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to allocate ");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($stack7);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack12.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($stack17);

        throw $stack12;

     label4:
        return $stack10;
    }

    private void reallocateMemoryChecks(long, long)
    {
        jdk.internal.misc.Unsafe this;
        long address, bytes;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        bytes := @parameter1: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPointer(java.lang.Object,long)>(null, address);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkSize(long)>(bytes);

        return;
    }

    public void setMemory(java.lang.Object, long, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte value, $stack7;
        java.lang.Object o;
        long offset, bytes;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        bytes := @parameter2: long;

        value := @parameter3: byte;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void setMemoryChecks(java.lang.Object,long,long,byte)>(o, offset, bytes, value);

        $stack7 = bytes cmp 0L;

        if $stack7 != 0 goto label1;

        return;

     label1:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void setMemory0(java.lang.Object,long,long,byte)>(o, offset, bytes, value);

        return;
    }

    public void setMemory(long, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte value;
        long address, bytes;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        bytes := @parameter1: long;

        value := @parameter2: byte;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void setMemory(java.lang.Object,long,long,byte)>(null, address, bytes, value);

        return;
    }

    private void setMemoryChecks(java.lang.Object, long, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte value;
        java.lang.Object o;
        long offset, bytes;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        bytes := @parameter2: long;

        value := @parameter3: byte;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(o, offset);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkSize(long)>(bytes);

        return;
    }

    public void copyMemory(java.lang.Object, long, java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack9;
        java.lang.Object srcBase, destBase;
        long srcOffset, destOffset, bytes;

        this := @this: jdk.internal.misc.Unsafe;

        srcBase := @parameter0: java.lang.Object;

        srcOffset := @parameter1: long;

        destBase := @parameter2: java.lang.Object;

        destOffset := @parameter3: long;

        bytes := @parameter4: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void copyMemoryChecks(java.lang.Object,long,java.lang.Object,long,long)>(srcBase, srcOffset, destBase, destOffset, bytes);

        $stack9 = bytes cmp 0L;

        if $stack9 != 0 goto label1;

        return;

     label1:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void copyMemory0(java.lang.Object,long,java.lang.Object,long,long)>(srcBase, srcOffset, destBase, destOffset, bytes);

        return;
    }

    public void copyMemory(long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        long srcAddress, destAddress, bytes;

        this := @this: jdk.internal.misc.Unsafe;

        srcAddress := @parameter0: long;

        destAddress := @parameter1: long;

        bytes := @parameter2: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(null, srcAddress, null, destAddress, bytes);

        return;
    }

    private void copyMemoryChecks(java.lang.Object, long, java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        long bytes, srcOffset, destOffset;
        java.lang.Object srcBase, destBase;

        this := @this: jdk.internal.misc.Unsafe;

        srcBase := @parameter0: java.lang.Object;

        srcOffset := @parameter1: long;

        destBase := @parameter2: java.lang.Object;

        destOffset := @parameter3: long;

        bytes := @parameter4: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkSize(long)>(bytes);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(srcBase, srcOffset);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(destBase, destOffset);

        return;
    }

    public void copySwapMemory(java.lang.Object, long, java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        long srcOffset, destOffset, bytes, elemSize;
        byte $stack11;
        java.lang.Object srcBase, destBase;

        this := @this: jdk.internal.misc.Unsafe;

        srcBase := @parameter0: java.lang.Object;

        srcOffset := @parameter1: long;

        destBase := @parameter2: java.lang.Object;

        destOffset := @parameter3: long;

        bytes := @parameter4: long;

        elemSize := @parameter5: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void copySwapMemoryChecks(java.lang.Object,long,java.lang.Object,long,long,long)>(srcBase, srcOffset, destBase, destOffset, bytes, elemSize);

        $stack11 = bytes cmp 0L;

        if $stack11 != 0 goto label1;

        return;

     label1:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void copySwapMemory0(java.lang.Object,long,java.lang.Object,long,long,long)>(srcBase, srcOffset, destBase, destOffset, bytes, elemSize);

        return;
    }

    private void copySwapMemoryChecks(java.lang.Object, long, java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        long bytes, elemSize, srcOffset, destOffset, $stack12;
        java.lang.RuntimeException $stack14, $stack20;
        byte $stack11, $stack15, $stack19, $stack13;
        java.lang.Object srcBase, destBase;

        this := @this: jdk.internal.misc.Unsafe;

        srcBase := @parameter0: java.lang.Object;

        srcOffset := @parameter1: long;

        destBase := @parameter2: java.lang.Object;

        destOffset := @parameter3: long;

        bytes := @parameter4: long;

        elemSize := @parameter5: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkSize(long)>(bytes);

        $stack11 = elemSize cmp 2L;

        if $stack11 == 0 goto label1;

        $stack15 = elemSize cmp 4L;

        if $stack15 == 0 goto label1;

        $stack19 = elemSize cmp 8L;

        if $stack19 == 0 goto label1;

        $stack20 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack20;

     label1:
        $stack12 = bytes % elemSize;

        $stack13 = $stack12 cmp 0L;

        if $stack13 == 0 goto label2;

        $stack14 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $stack14;

     label2:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(srcBase, srcOffset);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(destBase, destOffset);

        return;
    }

    public void copySwapMemory(long, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        long srcAddress, destAddress, bytes, elemSize;

        this := @this: jdk.internal.misc.Unsafe;

        srcAddress := @parameter0: long;

        destAddress := @parameter1: long;

        bytes := @parameter2: long;

        elemSize := @parameter3: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void copySwapMemory(java.lang.Object,long,java.lang.Object,long,long,long)>(null, srcAddress, null, destAddress, bytes, elemSize);

        return;
    }

    public void freeMemory(long)
    {
        jdk.internal.misc.Unsafe this;
        long address;
        byte $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void freeMemoryChecks(long)>(address);

        $stack3 = address cmp 0L;

        if $stack3 != 0 goto label1;

        return;

     label1:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void freeMemory0(long)>(address);

        return;
    }

    private void freeMemoryChecks(long)
    {
        jdk.internal.misc.Unsafe this;
        long address;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkPointer(java.lang.Object,long)>(null, address);

        return;
    }

    public void writebackMemory(long, long)
    {
        jdk.internal.misc.Unsafe this;
        long address, length, end, $stack12, line;
        byte $stack10;
        int $stack11, $i0;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        length := @parameter1: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkWritebackEnabled()>();

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkWritebackMemory(long,long)>(address, length);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void writebackPreSync0()>();

        line = virtualinvoke this.<jdk.internal.misc.Unsafe: long dataCacheLineAlignDown(long)>(address);

        end = address + length;

     label1:
        $stack10 = line cmp end;

        $i0 = (int) $stack10;

        if $i0 >= 0 goto label2;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void writeback0(long)>(line);

        $stack11 = virtualinvoke this.<jdk.internal.misc.Unsafe: int dataCacheLineFlushSize()>();

        $stack12 = (long) $stack11;

        line = line + $stack12;

        goto label1;

     label2:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void writebackPostSync0()>();

        return;
    }

    private void checkWritebackMemory(long, long)
    {
        jdk.internal.misc.Unsafe this;
        long address, length;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        length := @parameter1: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkNativeAddress(long)>(address);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void checkSize(long)>(length);

        return;
    }

    private void checkWritebackEnabled()
    {
        jdk.internal.misc.Unsafe this;
        java.lang.RuntimeException $stack2;
        boolean $stack1;

        this := @this: jdk.internal.misc.Unsafe;

        $stack1 = staticinvoke <jdk.internal.misc.Unsafe: boolean isWritebackEnabled()>();

        if $stack1 != 0 goto label1;

        $stack2 = new java.lang.RuntimeException;

        specialinvoke $stack2.<java.lang.RuntimeException: void <init>(java.lang.String)>("writebackMemory not enabled!");

        throw $stack2;

     label1:
        return;
    }

    private native void writeback0(long);

    private native void writebackPreSync0();

    private native void writebackPostSync0();

    public long objectFieldOffset(java.lang.reflect.Field)
    {
        jdk.internal.misc.Unsafe this;
        long $stack2;
        java.lang.reflect.Field f;
        java.lang.NullPointerException $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        f := @parameter0: java.lang.reflect.Field;

        if f != null goto label1;

        $stack3 = new java.lang.NullPointerException;

        specialinvoke $stack3.<java.lang.NullPointerException: void <init>()>();

        throw $stack3;

     label1:
        $stack2 = virtualinvoke this.<jdk.internal.misc.Unsafe: long objectFieldOffset0(java.lang.reflect.Field)>(f);

        return $stack2;
    }

    public long objectFieldOffset(java.lang.Class, java.lang.String)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Class c;
        long $stack4;
        java.lang.String name;
        java.lang.NullPointerException $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        c := @parameter0: java.lang.Class;

        name := @parameter1: java.lang.String;

        if c == null goto label1;

        if name != null goto label2;

     label1:
        $stack3 = new java.lang.NullPointerException;

        specialinvoke $stack3.<java.lang.NullPointerException: void <init>()>();

        throw $stack3;

     label2:
        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: long objectFieldOffset1(java.lang.Class,java.lang.String)>(c, name);

        return $stack4;
    }

    public long staticFieldOffset(java.lang.reflect.Field)
    {
        jdk.internal.misc.Unsafe this;
        long $stack2;
        java.lang.reflect.Field f;
        java.lang.NullPointerException $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        f := @parameter0: java.lang.reflect.Field;

        if f != null goto label1;

        $stack3 = new java.lang.NullPointerException;

        specialinvoke $stack3.<java.lang.NullPointerException: void <init>()>();

        throw $stack3;

     label1:
        $stack2 = virtualinvoke this.<jdk.internal.misc.Unsafe: long staticFieldOffset0(java.lang.reflect.Field)>(f);

        return $stack2;
    }

    public java.lang.Object staticFieldBase(java.lang.reflect.Field)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object $stack2;
        java.lang.reflect.Field f;
        java.lang.NullPointerException $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        f := @parameter0: java.lang.reflect.Field;

        if f != null goto label1;

        $stack3 = new java.lang.NullPointerException;

        specialinvoke $stack3.<java.lang.NullPointerException: void <init>()>();

        throw $stack3;

     label1:
        $stack2 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object staticFieldBase0(java.lang.reflect.Field)>(f);

        return $stack2;
    }

    public boolean shouldBeInitialized(java.lang.Class)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Class c;
        java.lang.NullPointerException $stack3;
        boolean $stack2;

        this := @this: jdk.internal.misc.Unsafe;

        c := @parameter0: java.lang.Class;

        if c != null goto label1;

        $stack3 = new java.lang.NullPointerException;

        specialinvoke $stack3.<java.lang.NullPointerException: void <init>()>();

        throw $stack3;

     label1:
        $stack2 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean shouldBeInitialized0(java.lang.Class)>(c);

        return $stack2;
    }

    public void ensureClassInitialized(java.lang.Class)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Class c;
        java.lang.NullPointerException $stack2;

        this := @this: jdk.internal.misc.Unsafe;

        c := @parameter0: java.lang.Class;

        if c != null goto label1;

        $stack2 = new java.lang.NullPointerException;

        specialinvoke $stack2.<java.lang.NullPointerException: void <init>()>();

        throw $stack2;

     label1:
        virtualinvoke this.<jdk.internal.misc.Unsafe: void ensureClassInitialized0(java.lang.Class)>(c);

        return;
    }

    public int arrayBaseOffset(java.lang.Class)
    {
        jdk.internal.misc.Unsafe this;
        int $stack2;
        java.lang.Class arrayClass;
        java.lang.NullPointerException $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        arrayClass := @parameter0: java.lang.Class;

        if arrayClass != null goto label1;

        $stack3 = new java.lang.NullPointerException;

        specialinvoke $stack3.<java.lang.NullPointerException: void <init>()>();

        throw $stack3;

     label1:
        $stack2 = virtualinvoke this.<jdk.internal.misc.Unsafe: int arrayBaseOffset0(java.lang.Class)>(arrayClass);

        return $stack2;
    }

    public int arrayIndexScale(java.lang.Class)
    {
        jdk.internal.misc.Unsafe this;
        int $stack2;
        java.lang.Class arrayClass;
        java.lang.NullPointerException $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        arrayClass := @parameter0: java.lang.Class;

        if arrayClass != null goto label1;

        $stack3 = new java.lang.NullPointerException;

        specialinvoke $stack3.<java.lang.NullPointerException: void <init>()>();

        throw $stack3;

     label1:
        $stack2 = virtualinvoke this.<jdk.internal.misc.Unsafe: int arrayIndexScale0(java.lang.Class)>(arrayClass);

        return $stack2;
    }

    public int addressSize()
    {
        int $stack1;
        jdk.internal.misc.Unsafe this;

        this := @this: jdk.internal.misc.Unsafe;

        $stack1 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        return $stack1;
    }

    public int pageSize()
    {
        int $stack1;
        jdk.internal.misc.Unsafe this;

        this := @this: jdk.internal.misc.Unsafe;

        $stack1 = <jdk.internal.misc.UnsafeConstants: int PAGE_SIZE>;

        return $stack1;
    }

    public int dataCacheLineFlushSize()
    {
        int $stack1;
        jdk.internal.misc.Unsafe this;

        this := @this: jdk.internal.misc.Unsafe;

        $stack1 = <jdk.internal.misc.UnsafeConstants: int DATA_CACHE_LINE_FLUSH_SIZE>;

        return $stack1;
    }

    public long dataCacheLineAlignDown(long)
    {
        jdk.internal.misc.Unsafe this;
        long address, $stack6, $stack7;
        int $stack3, $stack4, $stack5, $i0;

        this := @this: jdk.internal.misc.Unsafe;

        address := @parameter0: long;

        $stack3 = <jdk.internal.misc.UnsafeConstants: int DATA_CACHE_LINE_FLUSH_SIZE>;

        $stack4 = $stack3 - 1;

        $i0 = (int) -1;

        $stack5 = $stack4 ^ $i0;

        $stack6 = (long) $stack5;

        $stack7 = address & $stack6;

        return $stack7;
    }

    public static boolean isWritebackEnabled()
    {
        int $stack0;
        boolean $stack1;

        $stack0 = <jdk.internal.misc.UnsafeConstants: int DATA_CACHE_LINE_FLUSH_SIZE>;

        if $stack0 == 0 goto label1;

        $stack1 = 1;

        goto label2;

     label1:
        $stack1 = 0;

     label2:
        return $stack1;
    }

    public java.lang.Class defineClass(java.lang.String, byte[], int, int, java.lang.ClassLoader, java.security.ProtectionDomain)
    {
        jdk.internal.misc.Unsafe this;
        byte[] b;
        java.lang.ArrayIndexOutOfBoundsException $stack8;
        java.lang.NullPointerException $stack9;
        java.security.ProtectionDomain protectionDomain;
        int len, off;
        java.lang.Class $stack7;
        java.lang.String name;
        java.lang.ClassLoader loader;

        this := @this: jdk.internal.misc.Unsafe;

        name := @parameter0: java.lang.String;

        b := @parameter1: byte[];

        off := @parameter2: int;

        len := @parameter3: int;

        loader := @parameter4: java.lang.ClassLoader;

        protectionDomain := @parameter5: java.security.ProtectionDomain;

        if b != null goto label1;

        $stack9 = new java.lang.NullPointerException;

        specialinvoke $stack9.<java.lang.NullPointerException: void <init>()>();

        throw $stack9;

     label1:
        if len >= 0 goto label2;

        $stack8 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $stack8.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $stack8;

     label2:
        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Class defineClass0(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain)>(name, b, off, len, loader, protectionDomain);

        return $stack7;
    }

    public native java.lang.Class defineClass0(java.lang.String, byte[], int, int, java.lang.ClassLoader, java.security.ProtectionDomain);

    public native java.lang.Object allocateInstance(java.lang.Class) throws java.lang.InstantiationException;

    public java.lang.Object allocateUninitializedArray(java.lang.Class, int)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.IllegalArgumentException $stack5, $stack6, $stack7;
        int length;
        java.lang.Class componentType;
        java.lang.Object $stack4;
        boolean $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        componentType := @parameter0: java.lang.Class;

        length := @parameter1: int;

        if componentType != null goto label1;

        $stack7 = new java.lang.IllegalArgumentException;

        specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Component type is null");

        throw $stack7;

     label1:
        $stack3 = virtualinvoke componentType.<java.lang.Class: boolean isPrimitive()>();

        if $stack3 != 0 goto label2;

        $stack6 = new java.lang.IllegalArgumentException;

        specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Component type is not primitive");

        throw $stack6;

     label2:
        if length >= 0 goto label3;

        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative length");

        throw $stack5;

     label3:
        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object allocateUninitializedArray0(java.lang.Class,int)>(componentType, length);

        return $stack4;
    }

    private java.lang.Object allocateUninitializedArray0(java.lang.Class, int)
    {
        byte[] $stack18;
        double[] $stack11;
        float[] $stack13;
        long[] $stack12;
        int[] $stack14;
        int length;
        jdk.internal.misc.Unsafe this;
        boolean[] $stack17;
        char[] $stack15;
        java.lang.Class componentType, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10;
        short[] $stack16;

        this := @this: jdk.internal.misc.Unsafe;

        componentType := @parameter0: java.lang.Class;

        length := @parameter1: int;

        $stack3 = <java.lang.Byte: java.lang.Class TYPE>;

        if componentType != $stack3 goto label1;

        $stack18 = newarray (byte)[length];

        return $stack18;

     label1:
        $stack4 = <java.lang.Boolean: java.lang.Class TYPE>;

        if componentType != $stack4 goto label2;

        $stack17 = newarray (boolean)[length];

        return $stack17;

     label2:
        $stack5 = <java.lang.Short: java.lang.Class TYPE>;

        if componentType != $stack5 goto label3;

        $stack16 = newarray (short)[length];

        return $stack16;

     label3:
        $stack6 = <java.lang.Character: java.lang.Class TYPE>;

        if componentType != $stack6 goto label4;

        $stack15 = newarray (char)[length];

        return $stack15;

     label4:
        $stack7 = <java.lang.Integer: java.lang.Class TYPE>;

        if componentType != $stack7 goto label5;

        $stack14 = newarray (int)[length];

        return $stack14;

     label5:
        $stack8 = <java.lang.Float: java.lang.Class TYPE>;

        if componentType != $stack8 goto label6;

        $stack13 = newarray (float)[length];

        return $stack13;

     label6:
        $stack9 = <java.lang.Long: java.lang.Class TYPE>;

        if componentType != $stack9 goto label7;

        $stack12 = newarray (long)[length];

        return $stack12;

     label7:
        $stack10 = <java.lang.Double: java.lang.Class TYPE>;

        if componentType != $stack10 goto label8;

        $stack11 = newarray (double)[length];

        return $stack11;

     label8:
        return null;
    }

    public native void throwException(java.lang.Throwable);

    public final native boolean compareAndSetReference(java.lang.Object, long, java.lang.Object, java.lang.Object);

    public final native java.lang.Object compareAndExchangeReference(java.lang.Object, long, java.lang.Object, java.lang.Object);

    public final java.lang.Object compareAndExchangeReferenceAcquire(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x, $stack6;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final java.lang.Object compareAndExchangeReferenceRelease(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x, $stack6;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetReferencePlain(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetReferenceAcquire(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetReferenceRelease(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetReference(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final native boolean compareAndSetInt(java.lang.Object, long, int, int);

    public final native int compareAndExchangeInt(java.lang.Object, long, int, int);

    public final int compareAndExchangeIntAcquire(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe this;
        int expected, x, $stack6;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: int;

        x := @parameter3: int;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int compareAndExchangeInt(java.lang.Object,long,int,int)>(o, offset, expected, x);

        return $stack6;
    }

    public final int compareAndExchangeIntRelease(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe this;
        int expected, x, $stack6;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: int;

        x := @parameter3: int;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int compareAndExchangeInt(java.lang.Object,long,int,int)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetIntPlain(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe this;
        int expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: int;

        x := @parameter3: int;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetIntAcquire(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe this;
        int expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: int;

        x := @parameter3: int;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetIntRelease(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe this;
        int expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: int;

        x := @parameter3: int;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetInt(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe this;
        int expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: int;

        x := @parameter3: int;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(o, offset, expected, x);

        return $stack6;
    }

    public final byte compareAndExchangeByte(java.lang.Object, long, byte, byte)
    {
        long offset, wordOffset, $stack13;
        short $stack16, $stack17, $s0, $s1;
        byte expected, x, $stack32;
        int $stack14, $stack20, $stack21, $stack22, $stack30, $stack31, $stack35, $stack39, $stack43, shift, $stack18, $stack19, $i0, $i1, $i2;
        boolean $stack15, $stack23;
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: byte;

        x := @parameter3: byte;

        wordOffset = offset & -4L;

        $stack13 = offset & 3L;

        $stack14 = (int) $stack13;

        shift = $stack14 << 3;

        $stack15 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $stack15 == 0 goto label1;

        shift = 24 - shift;

     label1:
        $stack35 = 255 << shift;

        $s0 = (short) expected;

        $stack16 = $s0 & 255;

        $i0 = (int) $stack16;

        $stack39 = $i0 << shift;

        $s1 = (short) x;

        $stack17 = $s1 & 255;

        $i1 = (int) $stack17;

        $stack43 = $i1 << shift;

     label2:
        $stack18 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, wordOffset);

        $stack19 = $stack18 & $stack35;

        if $stack19 == $stack39 goto label3;

        $stack30 = $stack18 & $stack35;

        $stack31 = $stack30 >> shift;

        $stack32 = (byte) $stack31;

        return $stack32;

     label3:
        $i2 = (int) -1;

        $stack20 = $stack35 ^ $i2;

        $stack21 = $stack18 & $stack20;

        $stack22 = $stack21 | $stack43;

        $stack23 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, wordOffset, $stack18, $stack22);

        if $stack23 == 0 goto label2;

        return expected;
    }

    public final boolean compareAndSetByte(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte expected, x, $stack6;
        int $i0, $i1;
        java.lang.Object o;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: byte;

        x := @parameter3: byte;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte compareAndExchangeByte(java.lang.Object,long,byte,byte)>(o, offset, expected, x);

        $i0 = (int) $stack6;

        $i1 = (int) expected;

        if $i0 != $i1 goto label1;

        $stack7 = 1;

        goto label2;

     label1:
        $stack7 = 0;

     label2:
        return $stack7;
    }

    public final boolean weakCompareAndSetByte(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: byte;

        x := @parameter3: byte;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetByteAcquire(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: byte;

        x := @parameter3: byte;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetByteRelease(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: byte;

        x := @parameter3: byte;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetBytePlain(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: byte;

        x := @parameter3: byte;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, expected, x);

        return $stack6;
    }

    public final byte compareAndExchangeByteAcquire(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte expected, x, $stack6;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: byte;

        x := @parameter3: byte;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte compareAndExchangeByte(java.lang.Object,long,byte,byte)>(o, offset, expected, x);

        return $stack6;
    }

    public final byte compareAndExchangeByteRelease(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte expected, x, $stack6;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: byte;

        x := @parameter3: byte;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte compareAndExchangeByte(java.lang.Object,long,byte,byte)>(o, offset, expected, x);

        return $stack6;
    }

    public final short compareAndExchangeShort(java.lang.Object, long, short, short)
    {
        byte $stack14;
        boolean $stack17, $stack25;
        jdk.internal.misc.Unsafe this;
        long offset, $stack13, wordOffset, $stack15;
        short expected, x, $stack34;
        int $stack16, $stack18, $stack19, $stack22, $stack23, $stack24, $stack32, $stack33, $stack37, $stack41, $stack45, shift, $stack20, $stack21, $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $u0;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: short;

        x := @parameter3: short;

        $stack13 = offset & 3L;

        $stack14 = $stack13 cmp 3L;

        if $stack14 != 0 goto label1;

        $u0 = new java.lang.IllegalArgumentException;

        specialinvoke $u0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Update spans the word, not supported");

        throw $u0;

     label1:
        wordOffset = offset & -4L;

        $stack15 = offset & 3L;

        $stack16 = (int) $stack15;

        shift = $stack16 << 3;

        $stack17 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $stack17 == 0 goto label2;

        shift = 16 - shift;

     label2:
        $i0 = (int) 65535;

        $stack37 = $i0 << shift;

        $i1 = (int) expected;

        $i2 = (int) 65535;

        $stack18 = $i1 & $i2;

        $stack41 = $stack18 << shift;

        $i3 = (int) x;

        $i4 = (int) 65535;

        $stack19 = $i3 & $i4;

        $stack45 = $stack19 << shift;

     label3:
        $stack20 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, wordOffset);

        $stack21 = $stack20 & $stack37;

        if $stack21 == $stack41 goto label4;

        $stack32 = $stack20 & $stack37;

        $stack33 = $stack32 >> shift;

        $stack34 = (short) $stack33;

        return $stack34;

     label4:
        $i5 = (int) -1;

        $stack22 = $stack37 ^ $i5;

        $stack23 = $stack20 & $stack22;

        $stack24 = $stack23 | $stack45;

        $stack25 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, wordOffset, $stack20, $stack24);

        if $stack25 == 0 goto label3;

        return expected;
    }

    public final boolean compareAndSetShort(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short expected, x, $stack6;
        int $i0, $i1;
        java.lang.Object o;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: short;

        x := @parameter3: short;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short compareAndExchangeShort(java.lang.Object,long,short,short)>(o, offset, expected, x);

        $i0 = (int) $stack6;

        $i1 = (int) expected;

        if $i0 != $i1 goto label1;

        $stack7 = 1;

        goto label2;

     label1:
        $stack7 = 0;

     label2:
        return $stack7;
    }

    public final boolean weakCompareAndSetShort(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe this;
        short expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: short;

        x := @parameter3: short;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetShort(java.lang.Object,long,short,short)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetShortAcquire(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe this;
        short expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: short;

        x := @parameter3: short;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetShortRelease(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe this;
        short expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: short;

        x := @parameter3: short;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetShortPlain(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe this;
        short expected, x;
        java.lang.Object o;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: short;

        x := @parameter3: short;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, expected, x);

        return $stack6;
    }

    public final short compareAndExchangeShortAcquire(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe this;
        short expected, x, $stack6;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: short;

        x := @parameter3: short;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short compareAndExchangeShort(java.lang.Object,long,short,short)>(o, offset, expected, x);

        return $stack6;
    }

    public final short compareAndExchangeShortRelease(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe this;
        short expected, x, $stack6;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: short;

        x := @parameter3: short;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short compareAndExchangeShort(java.lang.Object,long,short,short)>(o, offset, expected, x);

        return $stack6;
    }

    private char s2c(short)
    {
        jdk.internal.misc.Unsafe this;
        short s;
        char $stack2;

        this := @this: jdk.internal.misc.Unsafe;

        s := @parameter0: short;

        $stack2 = (char) s;

        return $stack2;
    }

    private short c2s(char)
    {
        jdk.internal.misc.Unsafe this;
        char s;
        short $stack2;

        this := @this: jdk.internal.misc.Unsafe;

        s := @parameter0: char;

        $stack2 = (short) s;

        return $stack2;
    }

    public final boolean compareAndSetChar(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        char expected, x;
        short $stack6, $stack7;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: char;

        x := @parameter3: char;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetShort(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final char compareAndExchangeChar(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        char expected, x, $stack9;
        short $stack6, $stack7, $stack8;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: char;

        x := @parameter3: char;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: short compareAndExchangeShort(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack7);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack8);

        return $stack9;
    }

    public final char compareAndExchangeCharAcquire(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        char expected, x, $stack9;
        short $stack6, $stack7, $stack8;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: char;

        x := @parameter3: char;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: short compareAndExchangeShortAcquire(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack7);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack8);

        return $stack9;
    }

    public final char compareAndExchangeCharRelease(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        char expected, x, $stack9;
        short $stack6, $stack7, $stack8;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: char;

        x := @parameter3: char;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: short compareAndExchangeShortRelease(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack7);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack8);

        return $stack9;
    }

    public final boolean weakCompareAndSetChar(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        char expected, x;
        short $stack6, $stack7;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: char;

        x := @parameter3: char;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetCharAcquire(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        char expected, x;
        short $stack6, $stack7;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: char;

        x := @parameter3: char;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetCharRelease(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        char expected, x;
        short $stack6, $stack7;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: char;

        x := @parameter3: char;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetCharPlain(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        char expected, x;
        short $stack6, $stack7;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: char;

        x := @parameter3: char;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortPlain(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    private boolean byte2bool(byte)
    {
        jdk.internal.misc.Unsafe this;
        byte b;
        boolean $stack2;

        this := @this: jdk.internal.misc.Unsafe;

        b := @parameter0: byte;

        if b == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    private byte bool2byte(boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack2;
        boolean b;

        this := @this: jdk.internal.misc.Unsafe;

        b := @parameter0: boolean;

        if b == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public final boolean compareAndSetBoolean(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, $stack7;
        java.lang.Object o;
        boolean expected, x, $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: boolean;

        x := @parameter3: boolean;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean compareAndExchangeBoolean(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, $stack7, $stack8;
        java.lang.Object o;
        boolean expected, x, $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: boolean;

        x := @parameter3: boolean;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte compareAndExchangeByte(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack7);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack8);

        return $stack9;
    }

    public final boolean compareAndExchangeBooleanAcquire(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, $stack7, $stack8;
        java.lang.Object o;
        boolean expected, x, $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: boolean;

        x := @parameter3: boolean;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte compareAndExchangeByteAcquire(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack7);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack8);

        return $stack9;
    }

    public final boolean compareAndExchangeBooleanRelease(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, $stack7, $stack8;
        java.lang.Object o;
        boolean expected, x, $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: boolean;

        x := @parameter3: boolean;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte compareAndExchangeByteRelease(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack7);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack8);

        return $stack9;
    }

    public final boolean weakCompareAndSetBoolean(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, $stack7;
        java.lang.Object o;
        boolean expected, x, $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: boolean;

        x := @parameter3: boolean;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetBooleanAcquire(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, $stack7;
        java.lang.Object o;
        boolean expected, x, $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: boolean;

        x := @parameter3: boolean;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetBooleanRelease(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, $stack7;
        java.lang.Object o;
        boolean expected, x, $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: boolean;

        x := @parameter3: boolean;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetBooleanPlain(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, $stack7;
        java.lang.Object o;
        boolean expected, x, $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: boolean;

        x := @parameter3: boolean;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(expected);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetBytePlain(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean compareAndSetFloat(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack6, $stack7;
        float expected, x;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: float;

        x := @parameter3: float;

        $stack6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(expected);

        $stack7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final float compareAndExchangeFloat(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack7, $stack8, $stack9;
        float expected, x, $stack10;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: float;

        x := @parameter3: float;

        $stack7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(expected);

        $stack8 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(x);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: int compareAndExchangeInt(java.lang.Object,long,int,int)>(o, offset, $stack7, $stack8);

        $stack10 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack9);

        return $stack10;
    }

    public final float compareAndExchangeFloatAcquire(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack7, $stack8, $stack9;
        float expected, x, $stack10;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: float;

        x := @parameter3: float;

        $stack7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(expected);

        $stack8 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(x);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: int compareAndExchangeIntAcquire(java.lang.Object,long,int,int)>(o, offset, $stack7, $stack8);

        $stack10 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack9);

        return $stack10;
    }

    public final float compareAndExchangeFloatRelease(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack7, $stack8, $stack9;
        float expected, x, $stack10;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: float;

        x := @parameter3: float;

        $stack7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(expected);

        $stack8 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(x);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: int compareAndExchangeIntRelease(java.lang.Object,long,int,int)>(o, offset, $stack7, $stack8);

        $stack10 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack9);

        return $stack10;
    }

    public final boolean weakCompareAndSetFloatPlain(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack6, $stack7;
        float expected, x;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: float;

        x := @parameter3: float;

        $stack6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(expected);

        $stack7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntPlain(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetFloatAcquire(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack6, $stack7;
        float expected, x;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: float;

        x := @parameter3: float;

        $stack6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(expected);

        $stack7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetFloatRelease(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack6, $stack7;
        float expected, x;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: float;

        x := @parameter3: float;

        $stack6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(expected);

        $stack7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean weakCompareAndSetFloat(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack6, $stack7;
        float expected, x;
        java.lang.Object o;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: float;

        x := @parameter3: float;

        $stack6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(expected);

        $stack7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(x);

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        return $stack8;
    }

    public final boolean compareAndSetDouble(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack8, $stack9;
        java.lang.Object o;
        double expected, x;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: double;

        x := @parameter3: double;

        $stack8 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(expected);

        $stack9 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(x);

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        return $stack10;
    }

    public final double compareAndExchangeDouble(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack10, $stack11, $stack12;
        java.lang.Object o;
        double expected, x, $stack13;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: double;

        x := @parameter3: double;

        $stack10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(expected);

        $stack11 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(x);

        $stack12 = virtualinvoke this.<jdk.internal.misc.Unsafe: long compareAndExchangeLong(java.lang.Object,long,long,long)>(o, offset, $stack10, $stack11);

        $stack13 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack12);

        return $stack13;
    }

    public final double compareAndExchangeDoubleAcquire(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack10, $stack11, $stack12;
        java.lang.Object o;
        double expected, x, $stack13;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: double;

        x := @parameter3: double;

        $stack10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(expected);

        $stack11 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(x);

        $stack12 = virtualinvoke this.<jdk.internal.misc.Unsafe: long compareAndExchangeLongAcquire(java.lang.Object,long,long,long)>(o, offset, $stack10, $stack11);

        $stack13 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack12);

        return $stack13;
    }

    public final double compareAndExchangeDoubleRelease(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack10, $stack11, $stack12;
        java.lang.Object o;
        double expected, x, $stack13;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: double;

        x := @parameter3: double;

        $stack10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(expected);

        $stack11 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(x);

        $stack12 = virtualinvoke this.<jdk.internal.misc.Unsafe: long compareAndExchangeLongRelease(java.lang.Object,long,long,long)>(o, offset, $stack10, $stack11);

        $stack13 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack12);

        return $stack13;
    }

    public final boolean weakCompareAndSetDoublePlain(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack8, $stack9;
        java.lang.Object o;
        double expected, x;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: double;

        x := @parameter3: double;

        $stack8 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(expected);

        $stack9 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(x);

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongPlain(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        return $stack10;
    }

    public final boolean weakCompareAndSetDoubleAcquire(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack8, $stack9;
        java.lang.Object o;
        double expected, x;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: double;

        x := @parameter3: double;

        $stack8 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(expected);

        $stack9 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(x);

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        return $stack10;
    }

    public final boolean weakCompareAndSetDoubleRelease(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack8, $stack9;
        java.lang.Object o;
        double expected, x;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: double;

        x := @parameter3: double;

        $stack8 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(expected);

        $stack9 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(x);

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        return $stack10;
    }

    public final boolean weakCompareAndSetDouble(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack8, $stack9;
        java.lang.Object o;
        double expected, x;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: double;

        x := @parameter3: double;

        $stack8 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(expected);

        $stack9 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(x);

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        return $stack10;
    }

    public final native boolean compareAndSetLong(java.lang.Object, long, long, long);

    public final native long compareAndExchangeLong(java.lang.Object, long, long, long);

    public final long compareAndExchangeLongAcquire(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, expected, x, $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: long;

        x := @parameter3: long;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long compareAndExchangeLong(java.lang.Object,long,long,long)>(o, offset, expected, x);

        return $stack8;
    }

    public final long compareAndExchangeLongRelease(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, expected, x, $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: long;

        x := @parameter3: long;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long compareAndExchangeLong(java.lang.Object,long,long,long)>(o, offset, expected, x);

        return $stack8;
    }

    public final boolean weakCompareAndSetLongPlain(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, expected, x;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: long;

        x := @parameter3: long;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(o, offset, expected, x);

        return $stack8;
    }

    public final boolean weakCompareAndSetLongAcquire(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, expected, x;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: long;

        x := @parameter3: long;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(o, offset, expected, x);

        return $stack8;
    }

    public final boolean weakCompareAndSetLongRelease(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, expected, x;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: long;

        x := @parameter3: long;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(o, offset, expected, x);

        return $stack8;
    }

    public final boolean weakCompareAndSetLong(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, expected, x;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: long;

        x := @parameter3: long;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(o, offset, expected, x);

        return $stack8;
    }

    public native java.lang.Object getReferenceVolatile(java.lang.Object, long);

    public native void putReferenceVolatile(java.lang.Object, long, java.lang.Object);

    public native int getIntVolatile(java.lang.Object, long);

    public native void putIntVolatile(java.lang.Object, long, int);

    public native boolean getBooleanVolatile(java.lang.Object, long);

    public native void putBooleanVolatile(java.lang.Object, long, boolean);

    public native byte getByteVolatile(java.lang.Object, long);

    public native void putByteVolatile(java.lang.Object, long, byte);

    public native short getShortVolatile(java.lang.Object, long);

    public native void putShortVolatile(java.lang.Object, long, short);

    public native char getCharVolatile(java.lang.Object, long);

    public native void putCharVolatile(java.lang.Object, long, char);

    public native long getLongVolatile(java.lang.Object, long);

    public native void putLongVolatile(java.lang.Object, long, long);

    public native float getFloatVolatile(java.lang.Object, long);

    public native void putFloatVolatile(java.lang.Object, long, float);

    public native double getDoubleVolatile(java.lang.Object, long);

    public native void putDoubleVolatile(java.lang.Object, long, double);

    public final java.lang.Object getReferenceAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack4;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final boolean getBooleanAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        boolean $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean getBooleanVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final byte getByteAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack4;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final short getShortAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        short $stack4;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final char getCharAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        char $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: char getCharVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final int getIntAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        int $stack4;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final float getFloatAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        float $stack4;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: float getFloatVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final long getLongAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final double getDoubleAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        double $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: double getDoubleVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final void putReferenceRelease(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, x;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: java.lang.Object;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putReferenceVolatile(java.lang.Object,long,java.lang.Object)>(o, offset, x);

        return;
    }

    public final void putBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        boolean x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: boolean;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putBooleanVolatile(java.lang.Object,long,boolean)>(o, offset, x);

        return;
    }

    public final void putByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte x;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: byte;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByteVolatile(java.lang.Object,long,byte)>(o, offset, x);

        return;
    }

    public final void putShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        short x;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: short;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShortVolatile(java.lang.Object,long,short)>(o, offset, x);

        return;
    }

    public final void putCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        char x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: char;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putCharVolatile(java.lang.Object,long,char)>(o, offset, x);

        return;
    }

    public final void putIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int x;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: int;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(o, offset, x);

        return;
    }

    public final void putFloatRelease(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe this;
        float x;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: float;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putFloatVolatile(java.lang.Object,long,float)>(o, offset, x);

        return;
    }

    public final void putLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>(o, offset, x);

        return;
    }

    public final void putDoubleRelease(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        double x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: double;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putDoubleVolatile(java.lang.Object,long,double)>(o, offset, x);

        return;
    }

    public final java.lang.Object getReferenceOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack4;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final boolean getBooleanOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        boolean $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean getBooleanVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final byte getByteOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack4;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final short getShortOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        short $stack4;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final char getCharOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        char $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: char getCharVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final int getIntOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        int $stack4;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final float getFloatOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        float $stack4;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: float getFloatVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final long getLongOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final double getDoubleOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        double $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: double getDoubleVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final void putReferenceOpaque(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, x;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: java.lang.Object;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putReferenceVolatile(java.lang.Object,long,java.lang.Object)>(o, offset, x);

        return;
    }

    public final void putBooleanOpaque(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        boolean x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: boolean;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putBooleanVolatile(java.lang.Object,long,boolean)>(o, offset, x);

        return;
    }

    public final void putByteOpaque(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte x;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: byte;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByteVolatile(java.lang.Object,long,byte)>(o, offset, x);

        return;
    }

    public final void putShortOpaque(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        short x;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: short;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShortVolatile(java.lang.Object,long,short)>(o, offset, x);

        return;
    }

    public final void putCharOpaque(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        char x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: char;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putCharVolatile(java.lang.Object,long,char)>(o, offset, x);

        return;
    }

    public final void putIntOpaque(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int x;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: int;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(o, offset, x);

        return;
    }

    public final void putFloatOpaque(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe this;
        float x;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: float;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putFloatVolatile(java.lang.Object,long,float)>(o, offset, x);

        return;
    }

    public final void putLongOpaque(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: long;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>(o, offset, x);

        return;
    }

    public final void putDoubleOpaque(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        double x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: double;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putDoubleVolatile(java.lang.Object,long,double)>(o, offset, x);

        return;
    }

    public native void unpark(java.lang.Object);

    public native void park(boolean, long);

    public int getLoadAverage(double[], int)
    {
        jdk.internal.misc.Unsafe this;
        int nelems, $stack4, $stack5;
        double[] loadavg;
        java.lang.ArrayIndexOutOfBoundsException $stack3;

        this := @this: jdk.internal.misc.Unsafe;

        loadavg := @parameter0: double[];

        nelems := @parameter1: int;

        if nelems < 0 goto label1;

        if nelems > 3 goto label1;

        $stack4 = lengthof loadavg;

        if nelems <= $stack4 goto label2;

     label1:
        $stack3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $stack3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $stack3;

     label2:
        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getLoadAverage0(double[],int)>(loadavg, nelems);

        return $stack5;
    }

    public final int getAndAddInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, delta, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 + delta;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndAddIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, delta, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 + delta;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndAddIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, delta, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntAcquire(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 + delta;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final long getAndAddLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, delta, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 + delta;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndAddLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, delta, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 + delta;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndAddLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, delta, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongAcquire(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 + delta;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final byte getAndAddByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, delta, $stack8;
        int $stack7, $i0, $i1;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(o, offset);

        $i0 = (int) $stack6;

        $i1 = (int) delta;

        $stack7 = $i0 + $i1;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndAddByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, delta, $stack8;
        int $stack7, $i0, $i1;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $i0 = (int) $stack6;

        $i1 = (int) delta;

        $stack7 = $i0 + $i1;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndAddByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, delta, $stack8;
        int $stack7, $i0, $i1;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteAcquire(java.lang.Object,long)>(o, offset);

        $i0 = (int) $stack6;

        $i1 = (int) delta;

        $stack7 = $i0 + $i1;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndAddShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, delta, $stack8;
        int $stack7, $i0, $i1;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(o, offset);

        $i0 = (int) $stack6;

        $i1 = (int) delta;

        $stack7 = $i0 + $i1;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndAddShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, delta, $stack8;
        int $stack7, $i0, $i1;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $i0 = (int) $stack6;

        $i1 = (int) delta;

        $stack7 = $i0 + $i1;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndAddShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, delta, $stack8;
        int $stack7, $i0, $i1;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortAcquire(java.lang.Object,long)>(o, offset);

        $i0 = (int) $stack6;

        $i1 = (int) delta;

        $stack7 = $i0 + $i1;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final char getAndAddChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char delta, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: char;

        $stack5 = (short) delta;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndAddShort(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = (char) $stack6;

        return $stack7;
    }

    public final char getAndAddCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char delta, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: char;

        $stack5 = (short) delta;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndAddShortRelease(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = (char) $stack6;

        return $stack7;
    }

    public final char getAndAddCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char delta, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: char;

        $stack5 = (short) delta;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndAddShortAcquire(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = (char) $stack6;

        return $stack7;
    }

    public final float getAndAddFloat(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack7, $stack10;
        float $stack8, delta, $stack9;
        java.lang.Object o;
        boolean $stack11;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: float;

     label1:
        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, offset);

        $stack8 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack7);

        $stack9 = $stack8 + delta;

        $stack10 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($stack9);

        $stack11 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, offset, $stack7, $stack10);

        if $stack11 == 0 goto label1;

        return $stack8;
    }

    public final float getAndAddFloatRelease(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack7, $stack10;
        float $stack8, delta, $stack9;
        java.lang.Object o;
        boolean $stack11;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: float;

     label1:
        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack8 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack7);

        $stack9 = $stack8 + delta;

        $stack10 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($stack9);

        $stack11 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(o, offset, $stack7, $stack10);

        if $stack11 == 0 goto label1;

        return $stack8;
    }

    public final float getAndAddFloatAcquire(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        int $stack7, $stack10;
        float $stack8, delta, $stack9;
        java.lang.Object o;
        boolean $stack11;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: float;

     label1:
        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntAcquire(java.lang.Object,long)>(o, offset);

        $stack8 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack7);

        $stack9 = $stack8 + delta;

        $stack10 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($stack9);

        $stack11 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(o, offset, $stack7, $stack10);

        if $stack11 == 0 goto label1;

        return $stack8;
    }

    public final double getAndAddDouble(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack10, $stack13;
        java.lang.Object o;
        double $stack11, delta, $stack12;
        boolean $stack14;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: double;

     label1:
        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(o, offset);

        $stack11 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack10);

        $stack12 = $stack11 + delta;

        $stack13 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($stack12);

        $stack14 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(o, offset, $stack10, $stack13);

        if $stack14 == 0 goto label1;

        return $stack11;
    }

    public final double getAndAddDoubleRelease(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack10, $stack13;
        java.lang.Object o;
        double $stack11, delta, $stack12;
        boolean $stack14;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: double;

     label1:
        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack11 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack10);

        $stack12 = $stack11 + delta;

        $stack13 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($stack12);

        $stack14 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(o, offset, $stack10, $stack13);

        if $stack14 == 0 goto label1;

        return $stack11;
    }

    public final double getAndAddDoubleAcquire(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack10, $stack13;
        java.lang.Object o;
        double $stack11, delta, $stack12;
        boolean $stack14;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        delta := @parameter2: double;

     label1:
        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongAcquire(java.lang.Object,long)>(o, offset);

        $stack11 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack10);

        $stack12 = $stack11 + delta;

        $stack13 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($stack12);

        $stack14 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(o, offset, $stack10, $stack13);

        if $stack14 == 0 goto label1;

        return $stack11;
    }

    public final int getAndSetInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final int getAndSetIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final int getAndSetIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntAcquire(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final long getAndSetLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, newValue;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(o, offset);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(o, offset, $stack8, newValue);

        if $stack9 == 0 goto label1;

        return $stack8;
    }

    public final long getAndSetLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, newValue;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(o, offset, $stack8, newValue);

        if $stack9 == 0 goto label1;

        return $stack8;
    }

    public final long getAndSetLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, newValue;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongAcquire(java.lang.Object,long)>(o, offset);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(o, offset, $stack8, newValue);

        if $stack9 == 0 goto label1;

        return $stack8;
    }

    public final java.lang.Object getAndSetReference(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack6, newValue;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: java.lang.Object;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final java.lang.Object getAndSetReferenceRelease(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack6, newValue;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: java.lang.Object;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReference(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferenceRelease(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final java.lang.Object getAndSetReferenceAcquire(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack6, newValue;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: java.lang.Object;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceAcquire(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferenceAcquire(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndSetByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndSetByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndSetByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteAcquire(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final boolean getAndSetBoolean(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean newValue, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(newValue);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndSetByte(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndSetBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean newValue, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(newValue);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndSetByteRelease(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndSetBooleanAcquire(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean newValue, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(newValue);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndSetByteAcquire(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final short getAndSetShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        short $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final short getAndSetShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        short $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final short getAndSetShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        short $stack6, newValue;
        java.lang.Object o;
        long offset;
        boolean $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortAcquire(java.lang.Object,long)>(o, offset);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(o, offset, $stack6, newValue);

        if $stack7 == 0 goto label1;

        return $stack6;
    }

    public final char getAndSetChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char newValue, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(newValue);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndSetShort(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndSetCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char newValue, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(newValue);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndSetShortRelease(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndSetCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char newValue, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(newValue);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndSetShortAcquire(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final float getAndSetFloat(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, $stack7;
        float newValue, $stack8;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: float;

        $stack6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(newValue);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getAndSetInt(java.lang.Object,long,int)>(o, offset, $stack6);

        $stack8 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack7);

        return $stack8;
    }

    public final float getAndSetFloatRelease(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, $stack7;
        float newValue, $stack8;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: float;

        $stack6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(newValue);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getAndSetIntRelease(java.lang.Object,long,int)>(o, offset, $stack6);

        $stack8 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack7);

        return $stack8;
    }

    public final float getAndSetFloatAcquire(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, $stack7;
        float newValue, $stack8;
        java.lang.Object o;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: float;

        $stack6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(newValue);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getAndSetIntAcquire(java.lang.Object,long,int)>(o, offset, $stack6);

        $stack8 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($stack7);

        return $stack8;
    }

    public final double getAndSetDouble(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, $stack9;
        double newValue, $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: double;

        $stack8 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(newValue);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getAndSetLong(java.lang.Object,long,long)>(o, offset, $stack8);

        $stack10 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack9);

        return $stack10;
    }

    public final double getAndSetDoubleRelease(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, $stack9;
        double newValue, $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: double;

        $stack8 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(newValue);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getAndSetLongRelease(java.lang.Object,long,long)>(o, offset, $stack8);

        $stack10 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack9);

        return $stack10;
    }

    public final double getAndSetDoubleAcquire(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, $stack9;
        double newValue, $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: double;

        $stack8 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(newValue);

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getAndSetLongAcquire(java.lang.Object,long,long)>(o, offset, $stack8);

        $stack10 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($stack9);

        return $stack10;
    }

    public final boolean getAndBitwiseOrBoolean(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseOrByte(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndBitwiseOrBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseOrByteRelease(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndBitwiseOrBooleanAcquire(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseOrByteAcquire(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndBitwiseAndBoolean(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseAndByte(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndBitwiseAndBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseAndByteRelease(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndBitwiseAndBooleanAcquire(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseAndByteAcquire(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndBitwiseXorBoolean(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseXorByte(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndBitwiseXorBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseXorByteRelease(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final boolean getAndBitwiseXorBooleanAcquire(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        byte $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getAndBitwiseXorByteAcquire(java.lang.Object,long,byte)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($stack6);

        return $stack7;
    }

    public final byte getAndBitwiseOrByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndBitwiseOrByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndBitwiseOrByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndBitwiseAndByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndBitwiseAndByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndBitwiseAndByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndBitwiseXorByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndBitwiseXorByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final byte getAndBitwiseXorByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        byte $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: byte;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = (byte) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final char getAndBitwiseOrChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseOrShort(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndBitwiseOrCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseOrShortRelease(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndBitwiseOrCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseOrShortAcquire(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndBitwiseAndChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseAndShort(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndBitwiseAndCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseAndShortRelease(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndBitwiseAndCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseAndShortAcquire(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndBitwiseXorChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseXorShort(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndBitwiseXorCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseXorShortRelease(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final char getAndBitwiseXorCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        char mask, $stack7;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: char;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short c2s(char)>(mask);

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getAndBitwiseXorShortAcquire(java.lang.Object,long,short)>(o, offset, $stack5);

        $stack7 = virtualinvoke this.<jdk.internal.misc.Unsafe: char s2c(short)>($stack6);

        return $stack7;
    }

    public final short getAndBitwiseOrShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndBitwiseOrShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndBitwiseOrShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndBitwiseAndShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndBitwiseAndShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndBitwiseAndShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndBitwiseXorShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndBitwiseXorShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final short getAndBitwiseXorShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset;
        short $stack6, mask, $stack7, $stack8;
        java.lang.Object o;
        boolean $stack9;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: short;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = (short) $stack7;

        $stack9 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(o, offset, $stack6, $stack8);

        if $stack9 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseOrInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseOrIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseOrIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 | mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseAndInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseAndIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseAndIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 & mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseXorInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseXorIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final int getAndBitwiseXorIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe this;
        int $stack6, mask, $stack7;
        java.lang.Object o;
        long offset;
        boolean $stack8;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: int;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack7 = $stack6 ^ mask;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(o, offset, $stack6, $stack7);

        if $stack8 == 0 goto label1;

        return $stack6;
    }

    public final long getAndBitwiseOrLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 | mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndBitwiseOrLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 | mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndBitwiseOrLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 | mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndBitwiseAndLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 & mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndBitwiseAndLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 & mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndBitwiseAndLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 & mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndBitwiseXorLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 ^ mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndBitwiseXorLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 ^ mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public final long getAndBitwiseXorLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack8, mask, $stack9;
        boolean $stack10;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        mask := @parameter2: long;

     label1:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        $stack9 = $stack8 ^ mask;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(o, offset, $stack8, $stack9);

        if $stack10 == 0 goto label1;

        return $stack8;
    }

    public native void loadFence();

    public native void storeFence();

    public native void fullFence();

    public final void loadLoadFence()
    {
        jdk.internal.misc.Unsafe this;

        this := @this: jdk.internal.misc.Unsafe;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void loadFence()>();

        return;
    }

    public final void storeStoreFence()
    {
        jdk.internal.misc.Unsafe this;

        this := @this: jdk.internal.misc.Unsafe;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void storeFence()>();

        return;
    }

    private static void throwIllegalAccessError()
    {
        java.lang.IllegalAccessError $stack0;

        $stack0 = new java.lang.IllegalAccessError;

        specialinvoke $stack0.<java.lang.IllegalAccessError: void <init>()>();

        throw $stack0;
    }

    private static void throwNoSuchMethodError()
    {
        java.lang.NoSuchMethodError $stack0;

        $stack0 = new java.lang.NoSuchMethodError;

        specialinvoke $stack0.<java.lang.NoSuchMethodError: void <init>()>();

        throw $stack0;
    }

    public final boolean isBigEndian()
    {
        jdk.internal.misc.Unsafe this;
        boolean $stack1;

        this := @this: jdk.internal.misc.Unsafe;

        $stack1 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        return $stack1;
    }

    public final boolean unalignedAccess()
    {
        jdk.internal.misc.Unsafe this;
        boolean $stack1;

        this := @this: jdk.internal.misc.Unsafe;

        $stack1 = <jdk.internal.misc.UnsafeConstants: boolean UNALIGNED_ACCESS>;

        return $stack1;
    }

    public final long getLongUnaligned(java.lang.Object, long)
    {
        byte $stack5, $stack7, $stack9, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24;
        jdk.internal.misc.Unsafe this;
        long offset, $stack4, $stack6, $stack8, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack33, $stack35, $stack37, $stack38;
        short $stack26, $stack28, $stack30, $stack32;
        int $stack34, $stack36;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = offset & 7L;

        $stack5 = $stack4 cmp 0L;

        if $stack5 != 0 goto label1;

        $stack38 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(o, offset);

        return $stack38;

     label1:
        $stack6 = offset & 3L;

        $stack7 = $stack6 cmp 0L;

        if $stack7 != 0 goto label2;

        $stack34 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        $stack35 = offset + 4L;

        $stack36 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, $stack35);

        $stack37 = staticinvoke <jdk.internal.misc.Unsafe: long makeLong(int,int)>($stack34, $stack36);

        return $stack37;

     label2:
        $stack8 = offset & 1L;

        $stack9 = $stack8 cmp 0L;

        if $stack9 != 0 goto label3;

        $stack26 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack27 = offset + 2L;

        $stack28 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, $stack27);

        $stack29 = offset + 4L;

        $stack30 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, $stack29);

        $stack31 = offset + 6L;

        $stack32 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, $stack31);

        $stack33 = staticinvoke <jdk.internal.misc.Unsafe: long makeLong(short,short,short,short)>($stack26, $stack28, $stack30, $stack32);

        return $stack33;

     label3:
        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack11 = offset + 1L;

        $stack12 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack11);

        $stack13 = offset + 2L;

        $stack14 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack13);

        $stack15 = offset + 3L;

        $stack16 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack15);

        $stack17 = offset + 4L;

        $stack18 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack17);

        $stack19 = offset + 5L;

        $stack20 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack19);

        $stack21 = offset + 6L;

        $stack22 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack21);

        $stack23 = offset + 7L;

        $stack24 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack23);

        $stack25 = staticinvoke <jdk.internal.misc.Unsafe: long makeLong(byte,byte,byte,byte,byte,byte,byte,byte)>($stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24);

        return $stack25;
    }

    public final long getLongUnaligned(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, $stack5, $stack6;
        boolean bigEndian;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        bigEndian := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: long getLongUnaligned(java.lang.Object,long)>(o, offset);

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: long convEndian(boolean,long)>(bigEndian, $stack5);

        return $stack6;
    }

    public final int getIntUnaligned(java.lang.Object, long)
    {
        long offset, $stack4, $stack6, $stack9, $stack11, $stack13, $stack17;
        short $stack16, $stack18;
        byte $stack5, $stack7, $stack8, $stack10, $stack12, $stack14;
        int $stack15, $stack19, $stack20;
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = offset & 3L;

        $stack5 = $stack4 cmp 0L;

        if $stack5 != 0 goto label1;

        $stack20 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(o, offset);

        return $stack20;

     label1:
        $stack6 = offset & 1L;

        $stack7 = $stack6 cmp 0L;

        if $stack7 != 0 goto label2;

        $stack16 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        $stack17 = offset + 2L;

        $stack18 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, $stack17);

        $stack19 = staticinvoke <jdk.internal.misc.Unsafe: int makeInt(short,short)>($stack16, $stack18);

        return $stack19;

     label2:
        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack9 = offset + 1L;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack9);

        $stack11 = offset + 2L;

        $stack12 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack11);

        $stack13 = offset + 3L;

        $stack14 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack13);

        $stack15 = staticinvoke <jdk.internal.misc.Unsafe: int makeInt(byte,byte,byte,byte)>($stack8, $stack10, $stack12, $stack14);

        return $stack15;
    }

    public final int getIntUnaligned(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        int $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean bigEndian;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        bigEndian := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: int getIntUnaligned(java.lang.Object,long)>(o, offset);

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: int convEndian(boolean,int)>(bigEndian, $stack5);

        return $stack6;
    }

    public final short getShortUnaligned(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack4, $stack7;
        short $stack9, $stack10;
        byte $stack5, $stack6, $stack8;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = offset & 1L;

        $stack5 = $stack4 cmp 0L;

        if $stack5 != 0 goto label1;

        $stack10 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(o, offset);

        return $stack10;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = offset + 1L;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack7);

        $stack9 = staticinvoke <jdk.internal.misc.Unsafe: short makeShort(byte,byte)>($stack6, $stack8);

        return $stack9;
    }

    public final short getShortUnaligned(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5, $stack6;
        java.lang.Object o;
        long offset;
        boolean bigEndian;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        bigEndian := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: short getShortUnaligned(java.lang.Object,long)>(o, offset);

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: short convEndian(boolean,short)>(bigEndian, $stack5);

        return $stack6;
    }

    public final char getCharUnaligned(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack4, $stack7;
        char $stack10, $stack11;
        short $stack9;
        byte $stack5, $stack6, $stack8;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = offset & 1L;

        $stack5 = $stack4 cmp 0L;

        if $stack5 != 0 goto label1;

        $stack11 = virtualinvoke this.<jdk.internal.misc.Unsafe: char getChar(java.lang.Object,long)>(o, offset);

        return $stack11;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, offset);

        $stack7 = offset + 1L;

        $stack8 = virtualinvoke this.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(o, $stack7);

        $stack9 = staticinvoke <jdk.internal.misc.Unsafe: short makeShort(byte,byte)>($stack6, $stack8);

        $stack10 = (char) $stack9;

        return $stack10;
    }

    public final char getCharUnaligned(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        char $stack5, $stack6;
        boolean bigEndian;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        bigEndian := @parameter2: boolean;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: char getCharUnaligned(java.lang.Object,long)>(o, offset);

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: char convEndian(boolean,char)>(bigEndian, $stack5);

        return $stack6;
    }

    public final void putLongUnaligned(java.lang.Object, long, long)
    {
        byte $stack7, $stack9, $stack11, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35;
        jdk.internal.misc.Unsafe this;
        long offset, $stack6, $stack8, $stack10, x, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack36, $stack38, $stack40, $stack42, $stack48, $stack49;
        short $stack44, $stack45, $stack46, $stack47;
        int $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack37, $stack39, $stack41, $stack43, $stack50, $stack51;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: long;

        $stack6 = offset & 7L;

        $stack7 = $stack6 cmp 0L;

        if $stack7 != 0 goto label1;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLong(java.lang.Object,long,long)>(o, offset, x);

        goto label4;

     label1:
        $stack8 = offset & 3L;

        $stack9 = $stack8 cmp 0L;

        if $stack9 != 0 goto label2;

        $stack48 = x >> 0;

        $stack51 = (int) $stack48;

        $stack49 = x >>> 32;

        $stack50 = (int) $stack49;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLongParts(java.lang.Object,long,int,int)>(o, offset, $stack51, $stack50);

        goto label4;

     label2:
        $stack10 = offset & 1L;

        $stack11 = $stack10 cmp 0L;

        if $stack11 != 0 goto label3;

        $stack36 = x >>> 0;

        $stack37 = (int) $stack36;

        $stack47 = (short) $stack37;

        $stack38 = x >>> 16;

        $stack39 = (int) $stack38;

        $stack46 = (short) $stack39;

        $stack40 = x >>> 32;

        $stack41 = (int) $stack40;

        $stack45 = (short) $stack41;

        $stack42 = x >>> 48;

        $stack43 = (int) $stack42;

        $stack44 = (short) $stack43;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLongParts(java.lang.Object,long,short,short,short,short)>(o, offset, $stack47, $stack46, $stack45, $stack44);

        goto label4;

     label3:
        $stack12 = x >>> 0;

        $stack13 = (int) $stack12;

        $stack35 = (byte) $stack13;

        $stack14 = x >>> 8;

        $stack15 = (int) $stack14;

        $stack34 = (byte) $stack15;

        $stack16 = x >>> 16;

        $stack17 = (int) $stack16;

        $stack33 = (byte) $stack17;

        $stack18 = x >>> 24;

        $stack19 = (int) $stack18;

        $stack32 = (byte) $stack19;

        $stack20 = x >>> 32;

        $stack21 = (int) $stack20;

        $stack31 = (byte) $stack21;

        $stack22 = x >>> 40;

        $stack23 = (int) $stack22;

        $stack30 = (byte) $stack23;

        $stack24 = x >>> 48;

        $stack25 = (int) $stack24;

        $stack29 = (byte) $stack25;

        $stack26 = x >>> 56;

        $stack27 = (int) $stack26;

        $stack28 = (byte) $stack27;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLongParts(java.lang.Object,long,byte,byte,byte,byte,byte,byte,byte,byte)>(o, offset, $stack35, $stack34, $stack33, $stack32, $stack31, $stack30, $stack29, $stack28);

     label4:
        return;
    }

    public final void putLongUnaligned(java.lang.Object, long, long, boolean)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset, x, $stack7;
        boolean bigEndian;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: long;

        bigEndian := @parameter3: boolean;

        $stack7 = staticinvoke <jdk.internal.misc.Unsafe: long convEndian(boolean,long)>(bigEndian, x);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putLongUnaligned(java.lang.Object,long,long)>(o, offset, $stack7);

        return;
    }

    public final void putIntUnaligned(java.lang.Object, long, int)
    {
        long offset, $stack5, $stack7;
        short $stack19, $stack20;
        byte $stack6, $stack8, $stack13, $stack14, $stack15, $stack16;
        int x, $stack9, $stack10, $stack11, $stack12, $stack17, $stack18;
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: int;

        $stack5 = offset & 3L;

        $stack6 = $stack5 cmp 0L;

        if $stack6 != 0 goto label1;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(o, offset, x);

        goto label3;

     label1:
        $stack7 = offset & 1L;

        $stack8 = $stack7 cmp 0L;

        if $stack8 != 0 goto label2;

        $stack17 = x >> 0;

        $stack20 = (short) $stack17;

        $stack18 = x >>> 16;

        $stack19 = (short) $stack18;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putIntParts(java.lang.Object,long,short,short)>(o, offset, $stack20, $stack19);

        goto label3;

     label2:
        $stack9 = x >>> 0;

        $stack16 = (byte) $stack9;

        $stack10 = x >>> 8;

        $stack15 = (byte) $stack10;

        $stack11 = x >>> 16;

        $stack14 = (byte) $stack11;

        $stack12 = x >>> 24;

        $stack13 = (byte) $stack12;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putIntParts(java.lang.Object,long,byte,byte,byte,byte)>(o, offset, $stack16, $stack15, $stack14, $stack13);

     label3:
        return;
    }

    public final void putIntUnaligned(java.lang.Object, long, int, boolean)
    {
        jdk.internal.misc.Unsafe this;
        int x, $stack6;
        java.lang.Object o;
        long offset;
        boolean bigEndian;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: int;

        bigEndian := @parameter3: boolean;

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: int convEndian(boolean,int)>(bigEndian, x);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putIntUnaligned(java.lang.Object,long,int)>(o, offset, $stack6);

        return;
    }

    public final void putShortUnaligned(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack5;
        short x;
        byte $stack6, $stack9, $stack10;
        int $stack7, $stack8, $i0, $i1;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: short;

        $stack5 = offset & 1L;

        $stack6 = $stack5 cmp 0L;

        if $stack6 != 0 goto label1;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(o, offset, x);

        goto label2;

     label1:
        $i0 = (int) x;

        $stack7 = $i0 >>> 0;

        $stack10 = (byte) $stack7;

        $i1 = (int) x;

        $stack8 = $i1 >>> 8;

        $stack9 = (byte) $stack8;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShortParts(java.lang.Object,long,byte,byte)>(o, offset, $stack10, $stack9);

     label2:
        return;
    }

    public final void putShortUnaligned(java.lang.Object, long, short, boolean)
    {
        jdk.internal.misc.Unsafe this;
        short x, $stack6;
        java.lang.Object o;
        long offset;
        boolean bigEndian;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: short;

        bigEndian := @parameter3: boolean;

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: short convEndian(boolean,short)>(bigEndian, x);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShortUnaligned(java.lang.Object,long,short)>(o, offset, $stack6);

        return;
    }

    public final void putCharUnaligned(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe this;
        short $stack5;
        java.lang.Object o;
        long offset;
        char x;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: char;

        $stack5 = (short) x;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShortUnaligned(java.lang.Object,long,short)>(o, offset, $stack5);

        return;
    }

    public final void putCharUnaligned(java.lang.Object, long, char, boolean)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;
        long offset;
        char x, $stack6;
        boolean bigEndian;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: char;

        bigEndian := @parameter3: boolean;

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: char convEndian(boolean,char)>(bigEndian, x);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putCharUnaligned(java.lang.Object,long,char)>(o, offset, $stack6);

        return;
    }

    private static int pickPos(int, int)
    {
        int pos, top, $stack3;
        boolean $stack2;

        top := @parameter0: int;

        pos := @parameter1: int;

        $stack2 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $stack2 == 0 goto label1;

        $stack3 = top - pos;

        goto label2;

     label1:
        $stack3 = pos;

     label2:
        return $stack3;
    }

    private static long makeLong(byte, byte, byte, byte, byte, byte, byte, byte)
    {
        byte i0, i1, i2, i3, i4, i5, i6, i7;
        long $stack8, $stack10, $stack11, $stack13, $stack14, $stack15, $stack17, $stack18, $stack19, $stack21, $stack22, $stack23, $stack25, $stack26, $stack27, $stack29, $stack30, $stack31, $stack33, $stack34, $stack35, $stack37, $stack38;
        int $stack9, $stack12, $stack16, $stack20, $stack24, $stack28, $stack32, $stack36;

        i0 := @parameter0: byte;

        i1 := @parameter1: byte;

        i2 := @parameter2: byte;

        i3 := @parameter3: byte;

        i4 := @parameter4: byte;

        i5 := @parameter5: byte;

        i6 := @parameter6: byte;

        i7 := @parameter7: byte;

        $stack8 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(i0);

        $stack9 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 0);

        $stack10 = $stack8 << $stack9;

        $stack11 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(i1);

        $stack12 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 8);

        $stack13 = $stack11 << $stack12;

        $stack14 = $stack10 | $stack13;

        $stack15 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(i2);

        $stack16 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 16);

        $stack17 = $stack15 << $stack16;

        $stack18 = $stack14 | $stack17;

        $stack19 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(i3);

        $stack20 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 24);

        $stack21 = $stack19 << $stack20;

        $stack22 = $stack18 | $stack21;

        $stack23 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(i4);

        $stack24 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 32);

        $stack25 = $stack23 << $stack24;

        $stack26 = $stack22 | $stack25;

        $stack27 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(i5);

        $stack28 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 40);

        $stack29 = $stack27 << $stack28;

        $stack30 = $stack26 | $stack29;

        $stack31 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(i6);

        $stack32 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 48);

        $stack33 = $stack31 << $stack32;

        $stack34 = $stack30 | $stack33;

        $stack35 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(i7);

        $stack36 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 56);

        $stack37 = $stack35 << $stack36;

        $stack38 = $stack34 | $stack37;

        return $stack38;
    }

    private static long makeLong(short, short, short, short)
    {
        long $stack4, $stack6, $stack7, $stack9, $stack10, $stack11, $stack13, $stack14, $stack15, $stack17, $stack18;
        short i0, i1, i2, i3;
        int $stack5, $stack8, $stack12, $stack16;

        i0 := @parameter0: short;

        i1 := @parameter1: short;

        i2 := @parameter2: short;

        i3 := @parameter3: short;

        $stack4 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(short)>(i0);

        $stack5 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(48, 0);

        $stack6 = $stack4 << $stack5;

        $stack7 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(short)>(i1);

        $stack8 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(48, 16);

        $stack9 = $stack7 << $stack8;

        $stack10 = $stack6 | $stack9;

        $stack11 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(short)>(i2);

        $stack12 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(48, 32);

        $stack13 = $stack11 << $stack12;

        $stack14 = $stack10 | $stack13;

        $stack15 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(short)>(i3);

        $stack16 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(48, 48);

        $stack17 = $stack15 << $stack16;

        $stack18 = $stack14 | $stack17;

        return $stack18;
    }

    private static long makeLong(int, int)
    {
        long $stack2, $stack4, $stack5, $stack7, $stack8;
        int i0, $stack3, i1, $stack6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $stack2 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(int)>(i0);

        $stack3 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(32, 0);

        $stack4 = $stack2 << $stack3;

        $stack5 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(int)>(i1);

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(32, 32);

        $stack7 = $stack5 << $stack6;

        $stack8 = $stack4 | $stack7;

        return $stack8;
    }

    private static int makeInt(short, short)
    {
        short i0, i1;
        int $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        i0 := @parameter0: short;

        i1 := @parameter1: short;

        $stack2 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(short)>(i0);

        $stack3 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(16, 0);

        $stack4 = $stack2 << $stack3;

        $stack5 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(short)>(i1);

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(16, 16);

        $stack7 = $stack5 << $stack6;

        $stack8 = $stack4 | $stack7;

        return $stack8;
    }

    private static int makeInt(byte, byte, byte, byte)
    {
        byte i0, i1, i2, i3;
        int $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18;

        i0 := @parameter0: byte;

        i1 := @parameter1: byte;

        i2 := @parameter2: byte;

        i3 := @parameter3: byte;

        $stack4 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(i0);

        $stack5 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(24, 0);

        $stack6 = $stack4 << $stack5;

        $stack7 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(i1);

        $stack8 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(24, 8);

        $stack9 = $stack7 << $stack8;

        $stack10 = $stack6 | $stack9;

        $stack11 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(i2);

        $stack12 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(24, 16);

        $stack13 = $stack11 << $stack12;

        $stack14 = $stack10 | $stack13;

        $stack15 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(i3);

        $stack16 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(24, 24);

        $stack17 = $stack15 << $stack16;

        $stack18 = $stack14 | $stack17;

        return $stack18;
    }

    private static short makeShort(byte, byte)
    {
        short $stack9;
        byte i0, i1;
        int $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        i0 := @parameter0: byte;

        i1 := @parameter1: byte;

        $stack2 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(i0);

        $stack3 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(8, 0);

        $stack4 = $stack2 << $stack3;

        $stack5 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(i1);

        $stack6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(8, 8);

        $stack7 = $stack5 << $stack6;

        $stack8 = $stack4 | $stack7;

        $stack9 = (short) $stack8;

        return $stack9;
    }

    private static byte pick(byte, byte)
    {
        byte le, be, $stack3;
        boolean $stack2;

        le := @parameter0: byte;

        be := @parameter1: byte;

        $stack2 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $stack2 == 0 goto label1;

        $stack3 = be;

        goto label2;

     label1:
        $stack3 = le;

     label2:
        return $stack3;
    }

    private static short pick(short, short)
    {
        short le, be, $stack3;
        boolean $stack2;

        le := @parameter0: short;

        be := @parameter1: short;

        $stack2 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $stack2 == 0 goto label1;

        $stack3 = be;

        goto label2;

     label1:
        $stack3 = le;

     label2:
        return $stack3;
    }

    private static int pick(int, int)
    {
        int le, be, $stack3;
        boolean $stack2;

        le := @parameter0: int;

        be := @parameter1: int;

        $stack2 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $stack2 == 0 goto label1;

        $stack3 = be;

        goto label2;

     label1:
        $stack3 = le;

     label2:
        return $stack3;
    }

    private void putLongParts(java.lang.Object, long, byte, byte, byte, byte, byte, byte, byte, byte)
    {
        long offset, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26;
        byte i0, i7, $stack13, i1, i6, $stack15, i2, i5, $stack17, i3, i4, $stack19, $stack21, $stack23, $stack25, $stack27;
        jdk.internal.misc.Unsafe this;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        i0 := @parameter2: byte;

        i1 := @parameter3: byte;

        i2 := @parameter4: byte;

        i3 := @parameter5: byte;

        i4 := @parameter6: byte;

        i5 := @parameter7: byte;

        i6 := @parameter8: byte;

        i7 := @parameter9: byte;

        $stack12 = offset + 0L;

        $stack13 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i0, i7);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack12, $stack13);

        $stack14 = offset + 1L;

        $stack15 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i1, i6);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack14, $stack15);

        $stack16 = offset + 2L;

        $stack17 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i2, i5);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack16, $stack17);

        $stack18 = offset + 3L;

        $stack19 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i3, i4);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack18, $stack19);

        $stack20 = offset + 4L;

        $stack21 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i4, i3);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack20, $stack21);

        $stack22 = offset + 5L;

        $stack23 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i5, i2);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack22, $stack23);

        $stack24 = offset + 6L;

        $stack25 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i6, i1);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack24, $stack25);

        $stack26 = offset + 7L;

        $stack27 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i7, i0);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack26, $stack27);

        return;
    }

    private void putLongParts(java.lang.Object, long, short, short, short, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack8, $stack10, $stack12, $stack14;
        short i0, i3, $stack9, i1, i2, $stack11, $stack13, $stack15;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        i0 := @parameter2: short;

        i1 := @parameter3: short;

        i2 := @parameter4: short;

        i3 := @parameter5: short;

        $stack8 = offset + 0L;

        $stack9 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(i0, i3);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(o, $stack8, $stack9);

        $stack10 = offset + 2L;

        $stack11 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(i1, i2);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(o, $stack10, $stack11);

        $stack12 = offset + 4L;

        $stack13 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(i2, i1);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(o, $stack12, $stack13);

        $stack14 = offset + 6L;

        $stack15 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(i3, i0);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(o, $stack14, $stack15);

        return;
    }

    private void putLongParts(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack6, $stack8;
        int i0, i1, $stack7, $stack9;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $stack6 = offset + 0L;

        $stack7 = staticinvoke <jdk.internal.misc.Unsafe: int pick(int,int)>(i0, i1);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(o, $stack6, $stack7);

        $stack8 = offset + 4L;

        $stack9 = staticinvoke <jdk.internal.misc.Unsafe: int pick(int,int)>(i1, i0);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(o, $stack8, $stack9);

        return;
    }

    private void putIntParts(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack6, $stack8;
        short i0, i1, $stack7, $stack9;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        i0 := @parameter2: short;

        i1 := @parameter3: short;

        $stack6 = offset + 0L;

        $stack7 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(i0, i1);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(o, $stack6, $stack7);

        $stack8 = offset + 2L;

        $stack9 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(i1, i0);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(o, $stack8, $stack9);

        return;
    }

    private void putIntParts(java.lang.Object, long, byte, byte, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack8, $stack10, $stack12, $stack14;
        byte i0, i3, $stack9, i1, i2, $stack11, $stack13, $stack15;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        i0 := @parameter2: byte;

        i1 := @parameter3: byte;

        i2 := @parameter4: byte;

        i3 := @parameter5: byte;

        $stack8 = offset + 0L;

        $stack9 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i0, i3);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack8, $stack9);

        $stack10 = offset + 1L;

        $stack11 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i1, i2);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack10, $stack11);

        $stack12 = offset + 2L;

        $stack13 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i2, i1);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack12, $stack13);

        $stack14 = offset + 3L;

        $stack15 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i3, i0);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack14, $stack15);

        return;
    }

    private void putShortParts(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe this;
        long offset, $stack6, $stack8;
        byte i0, i1, $stack7, $stack9;
        java.lang.Object o;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        i0 := @parameter2: byte;

        i1 := @parameter3: byte;

        $stack6 = offset + 0L;

        $stack7 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i0, i1);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack6, $stack7);

        $stack8 = offset + 1L;

        $stack9 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(i1, i0);

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(o, $stack8, $stack9);

        return;
    }

    private static int toUnsignedInt(byte)
    {
        short $stack1, $s0;
        byte n;
        int $i0;

        n := @parameter0: byte;

        $s0 = (short) n;

        $stack1 = $s0 & 255;

        $i0 = (int) $stack1;

        return $i0;
    }

    private static int toUnsignedInt(short)
    {
        short n;
        int $stack1, $i0, $i1;

        n := @parameter0: short;

        $i0 = (int) n;

        $i1 = (int) 65535;

        $stack1 = $i0 & $i1;

        return $stack1;
    }

    private static long toUnsignedLong(byte)
    {
        long $stack1, $stack2;
        byte n;

        n := @parameter0: byte;

        $stack1 = (long) n;

        $stack2 = $stack1 & 255L;

        return $stack2;
    }

    private static long toUnsignedLong(short)
    {
        short n;
        long $stack1, $stack2;

        n := @parameter0: short;

        $stack1 = (long) n;

        $stack2 = $stack1 & 65535L;

        return $stack2;
    }

    private static long toUnsignedLong(int)
    {
        int n;
        long $stack1, $stack2;

        n := @parameter0: int;

        $stack1 = (long) n;

        $stack2 = $stack1 & 4294967295L;

        return $stack2;
    }

    private static char convEndian(boolean, char)
    {
        char n, $stack3;
        boolean big, $stack2;

        big := @parameter0: boolean;

        n := @parameter1: char;

        $stack2 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if big != $stack2 goto label1;

        $stack3 = n;

        goto label2;

     label1:
        $stack3 = staticinvoke <java.lang.Character: char reverseBytes(char)>(n);

     label2:
        return $stack3;
    }

    private static short convEndian(boolean, short)
    {
        short n, $stack3;
        boolean big, $stack2;

        big := @parameter0: boolean;

        n := @parameter1: short;

        $stack2 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if big != $stack2 goto label1;

        $stack3 = n;

        goto label2;

     label1:
        $stack3 = staticinvoke <java.lang.Short: short reverseBytes(short)>(n);

     label2:
        return $stack3;
    }

    private static int convEndian(boolean, int)
    {
        int n, $stack3;
        boolean big, $stack2;

        big := @parameter0: boolean;

        n := @parameter1: int;

        $stack2 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if big != $stack2 goto label1;

        $stack3 = n;

        goto label2;

     label1:
        $stack3 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(n);

     label2:
        return $stack3;
    }

    private static long convEndian(boolean, long)
    {
        long n, $stack4;
        boolean big, $stack3;

        big := @parameter0: boolean;

        n := @parameter1: long;

        $stack3 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if big != $stack3 goto label1;

        $stack4 = n;

        goto label2;

     label1:
        $stack4 = staticinvoke <java.lang.Long: long reverseBytes(long)>(n);

     label2:
        return $stack4;
    }

    private native long allocateMemory0(long);

    private native long reallocateMemory0(long, long);

    private native void freeMemory0(long);

    private native void setMemory0(java.lang.Object, long, long, byte);

    private native void copyMemory0(java.lang.Object, long, java.lang.Object, long, long);

    private native void copySwapMemory0(java.lang.Object, long, java.lang.Object, long, long, long);

    private native long objectFieldOffset0(java.lang.reflect.Field);

    private native long objectFieldOffset1(java.lang.Class, java.lang.String);

    private native long staticFieldOffset0(java.lang.reflect.Field);

    private native java.lang.Object staticFieldBase0(java.lang.reflect.Field);

    private native boolean shouldBeInitialized0(java.lang.Class);

    private native void ensureClassInitialized0(java.lang.Class);

    private native int arrayBaseOffset0(java.lang.Class);

    private native int arrayIndexScale0(java.lang.Class);

    private native int getLoadAverage0(double[], int);

    public void invokeCleaner(java.nio.ByteBuffer)
    {
        jdk.internal.misc.Unsafe this;
        sun.nio.ch.DirectBuffer db;
        java.lang.IllegalArgumentException $stack7, $stack8;
        java.nio.ByteBuffer directBuffer;
        jdk.internal.ref.Cleaner $stack6;
        java.lang.Object $stack5;
        boolean $stack4;

        this := @this: jdk.internal.misc.Unsafe;

        directBuffer := @parameter0: java.nio.ByteBuffer;

        $stack4 = virtualinvoke directBuffer.<java.nio.ByteBuffer: boolean isDirect()>();

        if $stack4 != 0 goto label1;

        $stack8 = new java.lang.IllegalArgumentException;

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer is non-direct");

        throw $stack8;

     label1:
        db = (sun.nio.ch.DirectBuffer) directBuffer;

        $stack5 = interfaceinvoke db.<sun.nio.ch.DirectBuffer: java.lang.Object attachment()>();

        if $stack5 == null goto label2;

        $stack7 = new java.lang.IllegalArgumentException;

        specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("duplicate or slice");

        throw $stack7;

     label2:
        $stack6 = interfaceinvoke db.<sun.nio.ch.DirectBuffer: jdk.internal.ref.Cleaner cleaner()>();

        if $stack6 == null goto label3;

        virtualinvoke $stack6.<jdk.internal.ref.Cleaner: void clean()>();

     label3:
        return;
    }

    public final java.lang.Object getObject(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack4;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReference(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final java.lang.Object getObjectVolatile(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack4;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceVolatile(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final java.lang.Object getObjectAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack4;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceAcquire(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final java.lang.Object getObjectOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, $stack4;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        $stack4 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceOpaque(java.lang.Object,long)>(o, offset);

        return $stack4;
    }

    public final void putObject(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, x;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: java.lang.Object;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putReference(java.lang.Object,long,java.lang.Object)>(o, offset, x);

        return;
    }

    public final void putObjectVolatile(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, x;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: java.lang.Object;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putReferenceVolatile(java.lang.Object,long,java.lang.Object)>(o, offset, x);

        return;
    }

    public final void putObjectOpaque(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, x;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: java.lang.Object;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putReferenceOpaque(java.lang.Object,long,java.lang.Object)>(o, offset, x);

        return;
    }

    public final void putObjectRelease(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, x;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        x := @parameter2: java.lang.Object;

        virtualinvoke this.<jdk.internal.misc.Unsafe: void putReferenceRelease(java.lang.Object,long,java.lang.Object)>(o, offset, x);

        return;
    }

    public final java.lang.Object getAndSetObject(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, newValue, $stack5;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: java.lang.Object;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getAndSetReference(java.lang.Object,long,java.lang.Object)>(o, offset, newValue);

        return $stack5;
    }

    public final java.lang.Object getAndSetObjectAcquire(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, newValue, $stack5;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: java.lang.Object;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getAndSetReferenceAcquire(java.lang.Object,long,java.lang.Object)>(o, offset, newValue);

        return $stack5;
    }

    public final java.lang.Object getAndSetObjectRelease(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, newValue, $stack5;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        newValue := @parameter2: java.lang.Object;

        $stack5 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object getAndSetReferenceRelease(java.lang.Object,long,java.lang.Object)>(o, offset, newValue);

        return $stack5;
    }

    public final boolean compareAndSetObject(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final java.lang.Object compareAndExchangeObject(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x, $stack6;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final java.lang.Object compareAndExchangeObjectAcquire(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x, $stack6;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReferenceAcquire(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final java.lang.Object compareAndExchangeObjectRelease(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x, $stack6;
        long offset;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReferenceRelease(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetObject(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetObjectAcquire(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferenceAcquire(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetObjectPlain(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferencePlain(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    public final boolean weakCompareAndSetObjectRelease(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe this;
        java.lang.Object o, expected, x;
        long offset;
        boolean $stack6;

        this := @this: jdk.internal.misc.Unsafe;

        o := @parameter0: java.lang.Object;

        offset := @parameter1: long;

        expected := @parameter2: java.lang.Object;

        x := @parameter3: java.lang.Object;

        $stack6 = virtualinvoke this.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferenceRelease(java.lang.Object,long,java.lang.Object,java.lang.Object)>(o, offset, expected, x);

        return $stack6;
    }

    static void <clinit>()
    {
        jdk.internal.misc.Unsafe $stack0, $stack1, $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack33, $stack35;
        int $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34, $stack36, $stack37;

        <jdk.internal.misc.Unsafe: int INVALID_FIELD_OFFSET> = -1;

        staticinvoke <jdk.internal.misc.Unsafe: void registerNatives()>();

        $stack0 = new jdk.internal.misc.Unsafe;

        specialinvoke $stack0.<jdk.internal.misc.Unsafe: void <init>()>();

        <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe> = $stack0;

        $stack1 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack2 = virtualinvoke $stack1.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Z");

        <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_BASE_OFFSET> = $stack2;

        $stack3 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack4 = virtualinvoke $stack3.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");

        <jdk.internal.misc.Unsafe: int ARRAY_BYTE_BASE_OFFSET> = $stack4;

        $stack5 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack6 = virtualinvoke $stack5.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[S");

        <jdk.internal.misc.Unsafe: int ARRAY_SHORT_BASE_OFFSET> = $stack6;

        $stack7 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack8 = virtualinvoke $stack7.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[C");

        <jdk.internal.misc.Unsafe: int ARRAY_CHAR_BASE_OFFSET> = $stack8;

        $stack9 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack10 = virtualinvoke $stack9.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[I");

        <jdk.internal.misc.Unsafe: int ARRAY_INT_BASE_OFFSET> = $stack10;

        $stack11 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack12 = virtualinvoke $stack11.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[J");

        <jdk.internal.misc.Unsafe: int ARRAY_LONG_BASE_OFFSET> = $stack12;

        $stack13 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack14 = virtualinvoke $stack13.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[F");

        <jdk.internal.misc.Unsafe: int ARRAY_FLOAT_BASE_OFFSET> = $stack14;

        $stack15 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack16 = virtualinvoke $stack15.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[D");

        <jdk.internal.misc.Unsafe: int ARRAY_DOUBLE_BASE_OFFSET> = $stack16;

        $stack17 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack18 = virtualinvoke $stack17.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/lang/Object;");

        <jdk.internal.misc.Unsafe: int ARRAY_OBJECT_BASE_OFFSET> = $stack18;

        $stack19 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack20 = virtualinvoke $stack19.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Z");

        <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_INDEX_SCALE> = $stack20;

        $stack21 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack22 = virtualinvoke $stack21.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[B");

        <jdk.internal.misc.Unsafe: int ARRAY_BYTE_INDEX_SCALE> = $stack22;

        $stack23 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack24 = virtualinvoke $stack23.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[S");

        <jdk.internal.misc.Unsafe: int ARRAY_SHORT_INDEX_SCALE> = $stack24;

        $stack25 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack26 = virtualinvoke $stack25.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[C");

        <jdk.internal.misc.Unsafe: int ARRAY_CHAR_INDEX_SCALE> = $stack26;

        $stack27 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack28 = virtualinvoke $stack27.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[I");

        <jdk.internal.misc.Unsafe: int ARRAY_INT_INDEX_SCALE> = $stack28;

        $stack29 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack30 = virtualinvoke $stack29.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[J");

        <jdk.internal.misc.Unsafe: int ARRAY_LONG_INDEX_SCALE> = $stack30;

        $stack31 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack32 = virtualinvoke $stack31.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[F");

        <jdk.internal.misc.Unsafe: int ARRAY_FLOAT_INDEX_SCALE> = $stack32;

        $stack33 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack34 = virtualinvoke $stack33.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[D");

        <jdk.internal.misc.Unsafe: int ARRAY_DOUBLE_INDEX_SCALE> = $stack34;

        $stack35 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $stack36 = virtualinvoke $stack35.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/lang/Object;");

        <jdk.internal.misc.Unsafe: int ARRAY_OBJECT_INDEX_SCALE> = $stack36;

        $stack37 = <jdk.internal.misc.UnsafeConstants: int ADDRESS_SIZE0>;

        <jdk.internal.misc.Unsafe: int ADDRESS_SIZE> = $stack37;

        return;
    }
}
