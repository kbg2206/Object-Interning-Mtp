class jdk.internal.module.ModuleReferences$ExplodedModuleReader extends java.lang.Object implements java.lang.module.ModuleReader
{
    private final java.nio.file.Path dir;
    private volatile boolean closed;

    void <init>(java.nio.file.Path)
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader this;
        java.nio.file.LinkOption[] $stack5;
        java.nio.file.Path dir;
        java.lang.SecurityManager $stack4;

        this := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        dir := @parameter0: java.nio.file.Path;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir> = dir;

        $stack4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $stack4 == null goto label1;

        $stack5 = newarray (java.nio.file.LinkOption)[0];

        staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(dir, $stack5);

     label1:
        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader this;
        java.io.IOException $stack2;
        boolean $stack1;

        this := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        $stack1 = this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: boolean closed>;

        if $stack1 == 0 goto label1;

        $stack2 = new java.io.IOException;

        specialinvoke $stack2.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $stack2;

     label1:
        return;
    }

    public java.util.Optional find(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $stack10;
        java.io.IOException $stack11;
        java.io.IOError $stack9;
        jdk.internal.module.ModuleReferences$ExplodedModuleReader this;
        java.util.Optional $stack6, $stack8;
        java.lang.String name;
        java.net.URI $stack7;
        java.nio.file.Path $stack4, $stack5;

        this := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        name := @parameter0: java.lang.String;

        virtualinvoke this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: void ensureOpen()>();

        $stack4 = this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        $stack5 = staticinvoke <jdk.internal.module.Resources: java.nio.file.Path toFilePath(java.nio.file.Path,java.lang.String)>($stack4, name);

        if $stack5 == null goto label4;

     label1:
        $stack7 = interfaceinvoke $stack5.<java.nio.file.Path: java.net.URI toUri()>();

        $stack8 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($stack7);

     label2:
        return $stack8;

     label3:
        $stack9 := @caughtexception;

        $stack10 = virtualinvoke $stack9.<java.io.IOError: java.lang.Throwable getCause()>();

        $stack11 = (java.io.IOException) $stack10;

        throw $stack11;

     label4:
        $stack6 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $stack6;

        catch java.io.IOError from label1 to label2 with label3;
    }

    public java.util.Optional open(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader this;
        java.nio.file.OpenOption[] $stack6;
        java.util.Optional $stack5, $stack8;
        java.lang.String name;
        java.nio.file.Path $stack3, $stack4;
        java.io.InputStream $stack7;

        this := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        name := @parameter0: java.lang.String;

        virtualinvoke this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: void ensureOpen()>();

        $stack3 = this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        $stack4 = staticinvoke <jdk.internal.module.Resources: java.nio.file.Path toFilePath(java.nio.file.Path,java.lang.String)>($stack3, name);

        if $stack4 == null goto label1;

        $stack6 = newarray (java.nio.file.OpenOption)[0];

        $stack7 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($stack4, $stack6);

        $stack8 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($stack7);

        return $stack8;

     label1:
        $stack5 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $stack5;
    }

    public java.util.Optional read(java.lang.String) throws java.io.IOException
    {
        byte[] $stack6;
        java.nio.ByteBuffer $stack7;
        jdk.internal.module.ModuleReferences$ExplodedModuleReader this;
        java.util.Optional $stack5, $stack8;
        java.lang.String name;
        java.nio.file.Path $stack3, $stack4;

        this := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        name := @parameter0: java.lang.String;

        virtualinvoke this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: void ensureOpen()>();

        $stack3 = this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        $stack4 = staticinvoke <jdk.internal.module.Resources: java.nio.file.Path toFilePath(java.nio.file.Path,java.lang.String)>($stack3, name);

        if $stack4 == null goto label1;

        $stack6 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>($stack4);

        $stack7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($stack6);

        $stack8 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($stack7);

        return $stack8;

     label1:
        $stack5 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $stack5;
    }

    public java.util.stream.Stream list() throws java.io.IOException
    {
        java.nio.file.FileVisitOption[] $stack1;
        java.util.function.Predicate $stack6;
        java.util.function.Function $stack4;
        jdk.internal.module.ModuleReferences$ExplodedModuleReader this;
        java.util.stream.Stream $stack3, $stack5, $stack7;
        java.nio.file.Path $stack2;

        this := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        virtualinvoke this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: void ensureOpen()>();

        $stack2 = this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        $stack1 = newarray (java.nio.file.FileVisitOption)[0];

        $stack3 = staticinvoke <java.nio.file.Files: java.util.stream.Stream walk(java.nio.file.Path,int,java.nio.file.FileVisitOption[])>($stack2, 2147483647, $stack1);

        $stack4 = staticinvoke <jdk.internal.module.ModuleReferences$ExplodedModuleReader$lambda_list_0__126: java.util.function.Function bootstrap$(jdk.internal.module.ModuleReferences$ExplodedModuleReader)>(this);

        $stack5 = interfaceinvoke $stack3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack4);

        $stack6 = staticinvoke <jdk.internal.module.ModuleReferences$ExplodedModuleReader$lambda_list_1__127: java.util.function.Predicate bootstrap$()>();

        $stack7 = interfaceinvoke $stack5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack6);

        return $stack7;
    }

    public void close()
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader this;

        this := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: boolean closed> = 1;

        return;
    }

    public static boolean lambda$list$1(java.lang.String)
    {
        int $stack1;
        java.lang.String s;
        boolean $stack2;

        s := @parameter0: java.lang.String;

        $stack1 = virtualinvoke s.<java.lang.String: int length()>();

        if $stack1 <= 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    private java.lang.String lambda$list$0(java.nio.file.Path)
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader this;
        java.lang.String $stack3;
        java.nio.file.Path f, $stack2;

        this := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        f := @parameter0: java.nio.file.Path;

        $stack2 = this.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        $stack3 = staticinvoke <jdk.internal.module.Resources: java.lang.String toResourceName(java.nio.file.Path,java.nio.file.Path)>($stack2, f);

        return $stack3;
    }
}
