class jdk.internal.reflect.BootstrapConstructorAccessorImpl extends jdk.internal.reflect.ConstructorAccessorImpl
{
    private final java.lang.reflect.Constructor constructor;

    void <init>(java.lang.reflect.Constructor)
    {
        jdk.internal.reflect.BootstrapConstructorAccessorImpl this;
        java.lang.reflect.Constructor c;

        this := @this: jdk.internal.reflect.BootstrapConstructorAccessorImpl;

        c := @parameter0: java.lang.reflect.Constructor;

        specialinvoke this.<jdk.internal.reflect.ConstructorAccessorImpl: void <init>()>();

        this.<jdk.internal.reflect.BootstrapConstructorAccessorImpl: java.lang.reflect.Constructor constructor> = c;

        return;
    }

    public java.lang.Object newInstance(java.lang.Object[]) throws java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        jdk.internal.misc.Unsafe $stack4;
        java.lang.Object[] args;
        jdk.internal.reflect.BootstrapConstructorAccessorImpl this;
        java.lang.reflect.Constructor $stack3;
        java.lang.reflect.InvocationTargetException $stack8;
        java.lang.InstantiationException $stack7;
        java.lang.Class $stack5;
        java.lang.Object $stack6;

        this := @this: jdk.internal.reflect.BootstrapConstructorAccessorImpl;

        args := @parameter0: java.lang.Object[];

     label1:
        $stack4 = <jdk.internal.reflect.UnsafeFieldAccessorImpl: jdk.internal.misc.Unsafe unsafe>;

        $stack3 = this.<jdk.internal.reflect.BootstrapConstructorAccessorImpl: java.lang.reflect.Constructor constructor>;

        $stack5 = virtualinvoke $stack3.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $stack6 = virtualinvoke $stack4.<jdk.internal.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)>($stack5);

     label2:
        return $stack6;

     label3:
        $stack7 := @caughtexception;

        $stack8 = new java.lang.reflect.InvocationTargetException;

        specialinvoke $stack8.<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>($stack7);

        throw $stack8;

        catch java.lang.InstantiationException from label1 to label2 with label3;
    }
}
