final class jdk.internal.ref.CleanerImpl$InnocuousThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    static final java.util.concurrent.ThreadFactory factory;
    final java.util.concurrent.atomic.AtomicInteger cleanerThreadNumber;

    void <init>()
    {
        java.util.concurrent.atomic.AtomicInteger $stack1;
        jdk.internal.ref.CleanerImpl$InnocuousThreadFactory this;

        this := @this: jdk.internal.ref.CleanerImpl$InnocuousThreadFactory;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $stack1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<jdk.internal.ref.CleanerImpl$InnocuousThreadFactory: java.util.concurrent.atomic.AtomicInteger cleanerThreadNumber> = $stack1;

        return;
    }

    static java.util.concurrent.ThreadFactory factory()
    {
        java.util.concurrent.ThreadFactory $stack0;

        $stack0 = <jdk.internal.ref.CleanerImpl$InnocuousThreadFactory: java.util.concurrent.ThreadFactory factory>;

        return $stack0;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        java.lang.Runnable r;
        jdk.internal.ref.CleanerImpl$InnocuousThreadFactory this;
        java.util.concurrent.atomic.AtomicInteger $stack4;
        java.lang.Thread $stack8;
        int $stack5, $i0;
        java.lang.StringBuilder $stack3, $stack6, $u0;
        java.lang.String $stack7;

        this := @this: jdk.internal.ref.CleanerImpl$InnocuousThreadFactory;

        r := @parameter0: java.lang.Runnable;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cleaner-");

        $stack4 = this.<jdk.internal.ref.CleanerImpl$InnocuousThreadFactory: java.util.concurrent.atomic.AtomicInteger cleanerThreadNumber>;

        $stack5 = virtualinvoke $stack4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $stack6 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = (int) -1;

        $stack8 = staticinvoke <jdk.internal.misc.InnocuousThread: java.lang.Thread newThread(java.lang.String,java.lang.Runnable,int)>($stack7, r, $i0);

        return $stack8;
    }

    static void <clinit>()
    {
        jdk.internal.ref.CleanerImpl$InnocuousThreadFactory $stack0;

        $stack0 = new jdk.internal.ref.CleanerImpl$InnocuousThreadFactory;

        specialinvoke $stack0.<jdk.internal.ref.CleanerImpl$InnocuousThreadFactory: void <init>()>();

        <jdk.internal.ref.CleanerImpl$InnocuousThreadFactory: java.util.concurrent.ThreadFactory factory> = $stack0;

        return;
    }
}
