Class: jdk.internal.org.objectweb.asm.Label
Field: DEBUG int
Field: RESOLVED int
Field: RESIZED int
Field: PUSHED int
Field: TARGET int
Field: STORE int
Field: REACHABLE int
Field: JSR int
Field: RET int
Field: SUBROUTINE int
Field: VISITED int
Field: VISITED2 int
Field: info java.lang.Object
Field: status int
Field: line int
Field: position int
Field: referenceCount int
Field: srcAndRefPositions int[]
Field: inputStackTop int
Field: outputStackMax int
Field: frame jdk.internal.org.objectweb.asm.Frame
Field: successor jdk.internal.org.objectweb.asm.Label
Field: successors jdk.internal.org.objectweb.asm.Edge
Field: next jdk.internal.org.objectweb.asm.Label
Method: <init>
    public void <init>()
    {
        jdk.internal.org.objectweb.asm.Label l0;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

Method: getOffset
    public int getOffset()
    {
        java.lang.IllegalStateException $stack4;
        jdk.internal.org.objectweb.asm.Label l0;
        int $stack1, $stack2, $stack3;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        $stack1 = l0.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack2 = $stack1 & 2;

        if $stack2 != 0 goto label1;

        $stack4 = new java.lang.IllegalStateException;

        specialinvoke $stack4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Label offset position has not been resolved yet");

        throw $stack4;

     label1:
        $stack3 = l0.<jdk.internal.org.objectweb.asm.Label: int position>;

        return $stack3;
    }

Method: put
    void put(jdk.internal.org.objectweb.asm.MethodWriter, jdk.internal.org.objectweb.asm.ByteVector, int, boolean)
    {
        jdk.internal.org.objectweb.asm.MethodWriter l1;
        jdk.internal.org.objectweb.asm.ByteVector l2;
        int $stack5, $stack6, l3, $stack7, $stack8, $stack10, $stack11, $stack13, $stack15, $stack16, $i0, $i1, $i2;
        boolean l4;
        jdk.internal.org.objectweb.asm.Label l0;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        l1 := @parameter0: jdk.internal.org.objectweb.asm.MethodWriter;

        l2 := @parameter1: jdk.internal.org.objectweb.asm.ByteVector;

        l3 := @parameter2: int;

        l4 := @parameter3: boolean;

        $stack5 = l0.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack6 = $stack5 & 2;

        if $stack6 != 0 goto label2;

        if l4 == 0 goto label1;

        $i0 = (int) -1;

        $stack16 = $i0 - l3;

        $stack15 = l2.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        specialinvoke l0.<jdk.internal.org.objectweb.asm.Label: void addReference(int,int)>($stack16, $stack15);

        $i1 = (int) -1;

        virtualinvoke l2.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putInt(int)>($i1);

        goto label4;

     label1:
        $stack13 = l2.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        specialinvoke l0.<jdk.internal.org.objectweb.asm.Label: void addReference(int,int)>(l3, $stack13);

        $i2 = (int) -1;

        virtualinvoke l2.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putShort(int)>($i2);

        goto label4;

     label2:
        if l4 == 0 goto label3;

        $stack10 = l0.<jdk.internal.org.objectweb.asm.Label: int position>;

        $stack11 = $stack10 - l3;

        virtualinvoke l2.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putInt(int)>($stack11);

        goto label4;

     label3:
        $stack7 = l0.<jdk.internal.org.objectweb.asm.Label: int position>;

        $stack8 = $stack7 - l3;

        virtualinvoke l2.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putShort(int)>($stack8);

     label4:
        return;
    }

Method: addReference
    private void addReference(int, int)
    {
        int[] $stack4, $stack5, $stack10, $stack13, $stack14, l3, $stack17, $stack19, $stack28;
        int $stack6, $stack7, $stack8, $stack9, l1, $stack11, $stack12, l2, $stack15, $stack16, $stack18;
        jdk.internal.org.objectweb.asm.Label l0;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        $stack4 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        if $stack4 != null goto label1;

        $stack28 = newarray (int)[6];

        l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions> = $stack28;

     label1:
        $stack7 = l0.<jdk.internal.org.objectweb.asm.Label: int referenceCount>;

        $stack5 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack6 = lengthof $stack5;

        if $stack7 < $stack6 goto label2;

        $stack14 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack15 = lengthof $stack14;

        $stack16 = $stack15 + 6;

        l3 = newarray (int)[$stack16];

        $stack19 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack17 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack18 = lengthof $stack17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack19, 0, l3, 0, $stack18);

        l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions> = l3;

     label2:
        $stack10 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack8 = l0.<jdk.internal.org.objectweb.asm.Label: int referenceCount>;

        $stack9 = $stack8 + 1;

        l0.<jdk.internal.org.objectweb.asm.Label: int referenceCount> = $stack9;

        $stack10[$stack8] = l1;

        $stack13 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack11 = l0.<jdk.internal.org.objectweb.asm.Label: int referenceCount>;

        $stack12 = $stack11 + 1;

        l0.<jdk.internal.org.objectweb.asm.Label: int referenceCount> = $stack12;

        $stack13[$stack11] = l2;

        return;
    }

Method: resolve
    boolean resolve(jdk.internal.org.objectweb.asm.MethodWriter, int, byte[])
    {
        byte[] l3;
        byte $stack20, $stack23, $stack26, $stack27, $stack31, $stack33, $stack40, $stack37, $stack38;
        int[] $stack14, $stack16;
        boolean l4;
        jdk.internal.org.objectweb.asm.MethodWriter l1;
        short $stack53, $s1;
        int $stack10, $stack11, l2, $stack12, l6, $stack17, $stack19, $stack22, $stack25, $stack30, $stack32, $stack34, $stack39, $stack41, l5, l5#3, l7, l8, l7#10, $stack36, $i0, $i1, $i2, $i3;
        jdk.internal.org.objectweb.asm.Label l0;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        l1 := @parameter0: jdk.internal.org.objectweb.asm.MethodWriter;

        l2 := @parameter1: int;

        l3 := @parameter2: byte[];

        l4 = 0;

        $stack10 = l0.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack11 = $stack10 | 2;

        l0.<jdk.internal.org.objectweb.asm.Label: int status> = $stack11;

        l0.<jdk.internal.org.objectweb.asm.Label: int position> = l2;

        l5 = 0;

     label1:
        $stack12 = l0.<jdk.internal.org.objectweb.asm.Label: int referenceCount>;

        if l5 >= $stack12 goto label8;

        $stack14 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        l5#3 = l5 + 1;

        l6 = $stack14[l5];

        $stack16 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        l5 = l5#3 + 1;

        l7 = $stack16[l5#3];

        if l6 < 0 goto label6;

        l8 = l2 - l6;

        $i0 = (int) -32768;

        if l8 < $i0 goto label2;

        if l8 <= 32767 goto label5;

     label2:
        $stack30 = l7 - 1;

        $stack31 = l3[$stack30];

        $s1 = (short) $stack31;

        $stack53 = $s1 & 255;

        $i1 = (int) $stack53;

        if $i1 > 168 goto label3;

        $stack41 = l7 - 1;

        $i2 = (int) $stack53;

        $stack39 = $i2 + 49;

        $stack40 = (byte) $stack39;

        l3[$stack41] = $stack40;

        goto label4;

     label3:
        $stack34 = l7 - 1;

        $i3 = (int) $stack53;

        $stack32 = $i3 + 20;

        $stack33 = (byte) $stack32;

        l3[$stack34] = $stack33;

     label4:
        l4 = 1;

     label5:
        l7#10 = l7 + 1;

        $stack36 = l8 >>> 8;

        $stack37 = (byte) $stack36;

        l3[l7] = $stack37;

        $stack38 = (byte) l8;

        l3[l7#10] = $stack38;

        goto label7;

     label6:
        $stack17 = l2 + l6;

        l8 = $stack17 + 1;

        l7#10 = l7 + 1;

        $stack19 = l8 >>> 24;

        $stack20 = (byte) $stack19;

        l3[l7] = $stack20;

        l7 = l7#10 + 1;

        $stack22 = l8 >>> 16;

        $stack23 = (byte) $stack22;

        l3[l7#10] = $stack23;

        l7#10 = l7 + 1;

        $stack25 = l8 >>> 8;

        $stack26 = (byte) $stack25;

        l3[l7] = $stack26;

        $stack27 = (byte) l8;

        l3[l7#10] = $stack27;

     label7:
        goto label1;

     label8:
        return l4;
    }

Method: getFirst
    jdk.internal.org.objectweb.asm.Label getFirst()
    {
        jdk.internal.org.objectweb.asm.Label l0, $stack3;
        jdk.internal.org.objectweb.asm.Frame $stack1, $stack2;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        $stack1 = l0.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Frame frame>;

        if $stack1 != null goto label1;

        $stack3 = l0;

        goto label2;

     label1:
        $stack2 = l0.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Frame frame>;

        $stack3 = $stack2.<jdk.internal.org.objectweb.asm.Frame: jdk.internal.org.objectweb.asm.Label owner>;

     label2:
        return $stack3;
    }

Method: inSubroutine
    boolean inSubroutine(long)
    {
        long l1, $stack5;
        jdk.internal.org.objectweb.asm.Label l0;
        int[] $stack7;
        int $stack3, $stack4, $stack6, $stack8, $stack9, $stack10;
        boolean $stack11;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        l1 := @parameter0: long;

        $stack3 = l0.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack4 = $stack3 & 1024;

        if $stack4 == 0 goto label3;

        $stack7 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack5 = l1 >>> 32;

        $stack6 = (int) $stack5;

        $stack9 = $stack7[$stack6];

        $stack8 = (int) l1;

        $stack10 = $stack9 & $stack8;

        if $stack10 == 0 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        return $stack11;

     label3:
        return 0;
    }

Method: inSameSubroutine
    boolean inSameSubroutine(jdk.internal.org.objectweb.asm.Label)
    {
        jdk.internal.org.objectweb.asm.Label l0, l1;
        int[] $stack7, $stack9, $stack10;
        int $stack3, $stack4, $stack5, $stack6, $stack8, $stack11, $stack12, $stack13, l2;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        l1 := @parameter0: jdk.internal.org.objectweb.asm.Label;

        $stack3 = l0.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack4 = $stack3 & 1024;

        if $stack4 == 0 goto label1;

        $stack5 = l1.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack6 = $stack5 & 1024;

        if $stack6 != 0 goto label2;

     label1:
        return 0;

     label2:
        l2 = 0;

     label3:
        $stack7 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack8 = lengthof $stack7;

        if l2 >= $stack8 goto label5;

        $stack9 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack12 = $stack9[l2];

        $stack10 = l1.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack11 = $stack10[l2];

        $stack13 = $stack12 & $stack11;

        if $stack13 == 0 goto label4;

        return 1;

     label4:
        l2 = l2 + 1;

        goto label3;

     label5:
        return 0;
    }

Method: addToSubroutine
    void addToSubroutine(long, int)
    {
        long l1, $stack6;
        int[] $stack8, $stack16;
        int $stack4, $stack5, $stack7, $stack9, $stack10, $stack11, $stack12, $stack13, l3, $stack14, $stack15;
        jdk.internal.org.objectweb.asm.Label l0;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        l1 := @parameter0: long;

        l3 := @parameter1: int;

        $stack4 = l0.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack5 = $stack4 & 1024;

        if $stack5 != 0 goto label1;

        $stack12 = l0.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack13 = $stack12 | 1024;

        l0.<jdk.internal.org.objectweb.asm.Label: int status> = $stack13;

        $stack14 = l3 / 32;

        $stack15 = $stack14 + 1;

        $stack16 = newarray (int)[$stack15];

        l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions> = $stack16;

     label1:
        $stack8 = l0.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack6 = l1 >>> 32;

        $stack7 = (int) $stack6;

        $stack10 = $stack8[$stack7];

        $stack9 = (int) l1;

        $stack11 = $stack10 | $stack9;

        $stack8[$stack7] = $stack11;

        return;
    }

Method: visitSubroutine
    void visitSubroutine(jdk.internal.org.objectweb.asm.Label, long, int)
    {
        long l2;
        int l4, $stack10, $stack11, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack31;
        boolean $stack8, $stack29;
        jdk.internal.org.objectweb.asm.Edge $stack18, $stack19, $stack30, $stack32, $stack34, l7;
        jdk.internal.org.objectweb.asm.Label l0, l6, l1, $stack12, $stack13, $stack15, $stack33, l5;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        l1 := @parameter0: jdk.internal.org.objectweb.asm.Label;

        l2 := @parameter1: long;

        l4 := @parameter2: int;

        l5 = l0;

     label01:
        if l5 == null goto label10;

        l6 = l5;

        l5 = l5.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Label next>;

        l6.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Label next> = null;

        if l1 == null goto label03;

        $stack21 = l6.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack22 = $stack21 & 2048;

        if $stack22 == 0 goto label02;

        goto label01;

     label02:
        $stack23 = l6.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack24 = $stack23 | 2048;

        l6.<jdk.internal.org.objectweb.asm.Label: int status> = $stack24;

        $stack25 = l6.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack26 = $stack25 & 256;

        if $stack26 == 0 goto label05;

        $stack29 = virtualinvoke l6.<jdk.internal.org.objectweb.asm.Label: boolean inSameSubroutine(jdk.internal.org.objectweb.asm.Label)>(l1);

        if $stack29 != 0 goto label05;

        $stack30 = new jdk.internal.org.objectweb.asm.Edge;

        specialinvoke $stack30.<jdk.internal.org.objectweb.asm.Edge: void <init>()>();

        $stack31 = l6.<jdk.internal.org.objectweb.asm.Label: int inputStackTop>;

        $stack30.<jdk.internal.org.objectweb.asm.Edge: int info> = $stack31;

        $stack32 = l1.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors>;

        $stack33 = $stack32.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor>;

        $stack30.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor> = $stack33;

        $stack34 = l6.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors>;

        $stack30.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Edge next> = $stack34;

        l6.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors> = $stack30;

        goto label05;

     label03:
        $stack8 = virtualinvoke l6.<jdk.internal.org.objectweb.asm.Label: boolean inSubroutine(long)>(l2);

        if $stack8 == 0 goto label04;

        goto label01;

     label04:
        virtualinvoke l6.<jdk.internal.org.objectweb.asm.Label: void addToSubroutine(long,int)>(l2, l4);

     label05:
        l7 = l6.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors>;

     label06:
        if l7 == null goto label09;

        $stack10 = l6.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack11 = $stack10 & 128;

        if $stack11 == 0 goto label07;

        $stack18 = l6.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors>;

        $stack19 = $stack18.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Edge next>;

        if l7 == $stack19 goto label08;

     label07:
        $stack12 = l7.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor>;

        $stack13 = $stack12.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Label next>;

        if $stack13 != null goto label08;

        $stack15 = l7.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor>;

        $stack15.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Label next> = l5;

        l5 = l7.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor>;

     label08:
        l7 = l7.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Edge next>;

        goto label06;

     label09:
        goto label01;

     label10:
        return;
    }

Method: toString
    public java.lang.String toString()
    {
        jdk.internal.org.objectweb.asm.Label l0;
        int $stack3;
        java.lang.StringBuilder $stack1, $stack2, $stack4;
        java.lang.String $stack5;

        l0 := @this: jdk.internal.org.objectweb.asm.Label;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $stack3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(l0);

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;
    }

